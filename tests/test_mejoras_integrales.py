#!/usr/bin/env python3
"""
Script de Prueba de Mejoras Integrales
Valida que todos los sistemas de mejora funcionen correctamente
"""

import sys
import os
import traceback

# A√±adir el directorio ra√≠z al path
sys.path.append('/workspaces/mercado')

def test_imports():
    """Prueba que todos los imports necesarios funcionen"""
    print("üîç Probando imports de sistemas de mejora...")
    
    try:
        from src.systems.SistemaIntegracionMejoras import SistemaIntegracionMejoras, ConfiguracionMejoras
        print("‚úÖ SistemaIntegracionMejoras importado correctamente")
        
        from src.systems.OptimizadorProductividadLaboral import OptimizadorProductividadLaboral, ConfigProductividad
        print("‚úÖ OptimizadorProductividadLaboral importado correctamente")
        
        from src.systems.ControladorConcentracionEmpresarial import ControladorConcentracionEmpresarial, ConfigCreacionEmpresas
        print("‚úÖ ControladorConcentracionEmpresarial importado correctamente")
        
        from src.systems.ReduccionActivaDesempleo import ReduccionActivaDesempleo, ConfigReduccionDesempleo
        print("‚úÖ ReduccionActivaDesempleo importado correctamente")
        
        from src.systems.EstabilizadorAutomaticoPIB import EstabilizadorAutomaticoPIB, ConfigEstabilizacionPIB
        print("‚úÖ EstabilizadorAutomaticoPIB importado correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en imports: {e}")
        traceback.print_exc()
        return False

def test_configuracion():
    """Prueba que las configuraciones se puedan crear correctamente"""
    print("\nüîß Probando configuraciones...")
    
    try:
        from src.systems.SistemaIntegracionMejoras import ConfiguracionMejoras
        from src.systems.OptimizadorProductividadLaboral import ConfigProductividad
        from src.systems.ControladorConcentracionEmpresarial import ConfigCreacionEmpresas
        from src.systems.ReduccionActivaDesempleo import ConfigReduccionDesempleo
        from src.systems.EstabilizadorAutomaticoPIB import ConfigEstabilizacionPIB
        
        config_mejoras = ConfiguracionMejoras()
        print(f"‚úÖ ConfiguracionMejoras creada: productividad_base {config_mejoras.productividad_base_minima}-{config_mejoras.productividad_base_maxima}")
        
        config_prod = ConfigProductividad()
        print(f"‚úÖ ConfigProductividad creada: objetivo {config_prod.productividad_minima_objetivo}-{config_prod.productividad_maxima_objetivo}")
        
        config_empresas = ConfigCreacionEmpresas()
        print(f"‚úÖ ConfigCreacionEmpresas creada: {config_empresas.empresas_minimas}-{config_empresas.empresas_optimas} empresas")
        
        config_desempleo = ConfigReduccionDesempleo()
        print(f"‚úÖ ConfigReduccionDesempleo creada: objetivo {config_desempleo.desempleo_objetivo:.1%}")
        
        config_pib = ConfigEstabilizacionPIB()
        print(f"‚úÖ ConfigEstabilizacionPIB creada: umbral {config_pib.umbral_volatilidad:.1%}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraciones: {e}")
        traceback.print_exc()
        return False

def test_inicializacion_sistemas():
    """Prueba que los sistemas se puedan inicializar"""
    print("\nüöÄ Probando inicializaci√≥n de sistemas...")
    
    try:
        from src.systems.SistemaIntegracionMejoras import SistemaIntegracionMejoras, ConfiguracionMejoras
        from src.systems.OptimizadorProductividadLaboral import OptimizadorProductividadLaboral
        from src.systems.ControladorConcentracionEmpresarial import ControladorConcentracionEmpresarial
        from src.systems.ReduccionActivaDesempleo import ReduccionActivaDesempleo
        from src.systems.EstabilizadorAutomaticoPIB import EstabilizadorAutomaticoPIB
        
        # Crear sistemas
        sistema_mejoras = SistemaIntegracionMejoras()
        print("‚úÖ SistemaIntegracionMejoras inicializado")
        
        optimizador = OptimizadorProductividadLaboral()
        print("‚úÖ OptimizadorProductividadLaboral inicializado")
        
        controlador = ControladorConcentracionEmpresarial()
        print("‚úÖ ControladorConcentracionEmpresarial inicializado")
        
        reductor = ReduccionActivaDesempleo()
        print("‚úÖ ReduccionActivaDesempleo inicializado")
        
        estabilizador = EstabilizadorAutomaticoPIB()
        print("‚úÖ EstabilizadorAutomaticoPIB inicializado")
        
        # Probar m√©todos b√°sicos
        reporte = sistema_mejoras.obtener_reporte_mejoras()
        print(f"‚úÖ Reporte de mejoras generado: {len(reporte)} secciones")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error inicializando sistemas: {e}")
        traceback.print_exc()
        return False

def test_config_json():
    """Prueba que el archivo de configuraci√≥n sea v√°lido"""
    print("\nüìã Probando configuraci√≥n JSON...")
    
    try:
        import json
        
        with open('/workspaces/mercado/config_simulacion.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print("‚úÖ Archivo JSON v√°lido")
        
        # Verificar secci√≥n de mejoras
        if 'mejoras_integrales' in config:
            mejoras = config['mejoras_integrales']
            print(f"‚úÖ Secci√≥n mejoras_integrales encontrada con {len(mejoras)} subsecciones")
            
            required_sections = ['productividad_laboral', 'control_concentracion', 'reduccion_desempleo', 'estabilizacion_pib']
            for section in required_sections:
                if section in mejoras:
                    print(f"‚úÖ Subsecci√≥n '{section}' encontrada")
                else:
                    print(f"‚ö†Ô∏è  Subsecci√≥n '{section}' faltante")
        else:
            print("‚ö†Ô∏è  Secci√≥n 'mejoras_integrales' no encontrada en configuraci√≥n")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n JSON: {e}")
        traceback.print_exc()
        return False

def test_simulacion_simple():
    """Prueba una mini simulaci√≥n para verificar integraci√≥n"""
    print("\nüéØ Probando mini simulaci√≥n...")
    
    try:
        # Crear simulador mock simple
        class MockSimulador:
            def __init__(self):
                self.pib = 100000
                self.desempleo = 0.15
                self.mercado = MockMercado()
        
        class MockMercado:
            def __init__(self):
                self.empresas = [MockEmpresa(f"Empresa_{i}") for i in range(2)]
        
        class MockEmpresa:
            def __init__(self, id):
                self.id = id
                self.activa = True
                self.capital = 50000
                self.empleados = [f"empleado_{i}" for i in range(10)]
                self.productividad_laboral = 0.3
        
        # Crear sistema de mejoras
        from src.systems.SistemaIntegracionMejoras import SistemaIntegracionMejoras
        sistema = SistemaIntegracionMejoras()
        
        # Simular mock
        simulador = MockSimulador()
        
        # Aplicar mejoras
        resultados = sistema.aplicar_mejoras_ciclo(simulador, 1)
        
        print(f"‚úÖ Mini simulaci√≥n ejecutada:")
        print(f"   - Productividad mejorada: {resultados['productividad_mejorada']}")
        print(f"   - Empresas creadas: {resultados['empresas_creadas']}")
        print(f"   - Desempleo reducido: {resultados['desempleo_reducido']:.3f}")
        print(f"   - PIB estabilizado: {resultados['pib_estabilizado']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en mini simulaci√≥n: {e}")
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ PRUEBAS DE MEJORAS INTEGRALES v3.2")
    print("=" * 50)
    
    tests = [
        ("Imports", test_imports),
        ("Configuraciones", test_configuracion),
        ("Inicializaci√≥n", test_inicializacion_sistemas),
        ("Config JSON", test_config_json),
        ("Mini Simulaci√≥n", test_simulacion_simple)
    ]
    
    resultados = []
    
    for nombre, test_func in tests:
        try:
            resultado = test_func()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"‚ùå Error en prueba {nombre}: {e}")
            resultados.append((nombre, False))
    
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE PRUEBAS:")
    print("=" * 50)
    
    exitosos = 0
    for nombre, resultado in resultados:
        status = "‚úÖ EXITOSO" if resultado else "‚ùå FALLIDO"
        print(f"{nombre}: {status}")
        if resultado:
            exitosos += 1
    
    print(f"\nüéØ RESULTADO FINAL: {exitosos}/{len(tests)} pruebas exitosas")
    
    if exitosos == len(tests):
        print("üéâ ¬°TODAS LAS MEJORAS EST√ÅN LISTAS PARA USAR!")
        return True
    else:
        print("‚ö†Ô∏è  Algunas mejoras necesitan atenci√≥n")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
