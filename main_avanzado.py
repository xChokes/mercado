"""
Simulaci√≥n econ√≥mica avanzada con sistemas integrados
Incluye: Sistema bancario, sectores econ√≥micos, psicolog√≠a econ√≥mica e innovaci√≥n
"""
import random
import time
import matplotlib.pyplot as plt
import numpy as np
from Mercado import Mercado
from Bien import Bien
from Consumidor import Consumidor
from Empresa import Empresa
from EmpresaProductora import EmpresaProductora
from ConfigEconomica import ConfigEconomica


def crear_bienes_avanzados():
    """Crea bienes con mayor variedad y caracter√≠sticas econ√≥micas realistas"""
    bienes = {}

    # Bienes b√°sicos alimentarios
    bienes['Arroz'] = Bien('Arroz', 'alimentos_basicos')
    bienes['Papa'] = Bien('Papa', 'alimentos_basicos')
    bienes['Pan'] = Bien('Pan', 'alimentos_basicos')
    bienes['Leche'] = Bien('Leche', 'alimentos_basicos')
    bienes['Sal'] = Bien('Sal', 'alimentos_basicos')
    bienes['Aceite'] = Bien('Aceite', 'alimentos_basicos')
    bienes['Azucar'] = Bien('Azucar', 'alimentos_basicos')

    # Bienes de lujo alimentarios
    bienes['Carne'] = Bien('Carne', 'alimentos_lujo')
    bienes['Pollo'] = Bien('Pollo', 'alimentos_lujo')
    bienes['Huevos'] = Bien('Huevos', 'alimentos_lujo')
    bienes['Cafe'] = Bien('Cafe', 'alimentos_lujo')
    bienes['Chocolate'] = Bien('Chocolate', 'alimentos_lujo')

    # Servicios b√°sicos
    bienes['Electricidad'] = Bien('Electricidad', 'servicios')
    bienes['Agua'] = Bien('Agua', 'servicios')
    bienes['Internet'] = Bien('Internet', 'servicios')
    bienes['Transporte'] = Bien('Transporte', 'servicios')

    # Bienes duraderos
    bienes['Telefono'] = Bien('Telefono', 'bienes_duraderos')
    bienes['Computadora'] = Bien('Computadora', 'bienes_duraderos')
    bienes['Refrigerador'] = Bien('Refrigerador', 'bienes_duraderos')

    return bienes


def configurar_economia_avanzada(mercado):
    """Configura una econom√≠a m√°s sofisticada con diferentes tipos de empresas"""
    print("üèóÔ∏è  Configurando econom√≠a avanzada...")

    # Crear empresas productoras especializadas por sector
    empresas_agricultura = []
    for i in range(3):  # 3 empresas agr√≠colas
        nombre = f"AgroEmpresa{i+1}"
        empresa = EmpresaProductora(nombre, mercado)
        # Especializar en productos agr√≠colas
        productos_agricolas = ['Arroz', 'Papa', 'Cafe', 'Azucar']
        for producto in productos_agricolas:
            if producto in empresa.bienes:
                # Mayor capacidad en especializaci√≥n
                empresa.capacidad_produccion[producto] *= 2
        mercado.agregar_persona(empresa)
        empresas_agricultura.append(empresa)
        print(f"   üåæ Creada {nombre} especializada en agricultura")

    # Empresas ganaderas
    empresas_ganaderia = []
    for i in range(2):
        nombre = f"Ganadera{i+1}"
        empresa = EmpresaProductora(nombre, mercado)
        productos_ganaderos = ['Carne', 'Pollo', 'Leche', 'Huevos']
        for producto in productos_ganaderos:
            if producto in empresa.bienes:
                empresa.capacidad_produccion[producto] *= 2
        mercado.agregar_persona(empresa)
        empresas_ganaderia.append(empresa)
        print(f"   üêÑ Creada {nombre} especializada en ganader√≠a")

    # Empresas de servicios
    empresas_servicios = []
    for i in range(4):
        nombre = f"ServiciosEmpresa{i+1}"
        empresa = Empresa.crear_con_acciones(
            nombre=nombre,
            mercado=mercado,
            cantidad_acciones=1000,
            bienes={}
        )
        mercado.agregar_persona(empresa)
        empresas_servicios.append(empresa)
        print(f"   üè¢ Creada {nombre} de servicios")

    # Empresas tecnol√≥gicas (innovadoras)
    empresas_tech = []
    for i in range(2):
        nombre = f"TechCorp{i+1}"
        empresa = EmpresaProductora(nombre, mercado)
        # Mayor capital para I+D
        empresa.dinero *= 1.5
        productos_tech = ['Telefono', 'Computadora', 'Internet']
        for producto in productos_tech:
            if producto in empresa.bienes:
                empresa.capacidad_produccion[producto] *= 1.5
        mercado.agregar_persona(empresa)
        empresas_tech.append(empresa)
        print(f"   üíª Creada {nombre} especializada en tecnolog√≠a")

    # Crear consumidores con perfiles diversos
    consumidores = []
    for i in range(300):  # Mayor poblaci√≥n para mejor simulaci√≥n
        nombre = f"Consumidor{i+1}"
        consumidor = Consumidor(nombre, mercado)
        mercado.agregar_persona(consumidor)
        consumidores.append(consumidor)

        # Asignar empleos con preferencia sectorial
        if consumidor.empleado:
            todas_empresas = empresas_agricultura + \
                empresas_ganaderia + empresas_servicios + empresas_tech
            if todas_empresas:
                empleador = random.choice(todas_empresas)
                if empleador.contratar(consumidor):
                    consumidor.empleador = empleador

    total_empresas = len(empresas_agricultura) + len(empresas_ganaderia) + \
        len(empresas_servicios) + len(empresas_tech)
    print(
        f"   üìä Total: {total_empresas} empresas, {len(consumidores)} consumidores")
    print("   üéØ Econom√≠a avanzada configurada correctamente")


def ejecutar_simulacion_avanzada(mercado, num_ciclos=60):
    """Ejecuta simulaci√≥n econ√≥mica con sistemas avanzados"""
    print(
        f"\nüöÄ Iniciando simulaci√≥n econ√≥mica avanzada de {num_ciclos} ciclos...")
    print("   üè¶ Sistema bancario activo")
    print("   üè≠ Sectores econ√≥micos diferenciados")
    print("   üß† Psicolog√≠a econ√≥mica implementada")
    print("   üî¨ Sistema de innovaci√≥n y tecnolog√≠a")

    inicio = time.time()

    # Almacenar m√©tricas expandidas
    metricas = {
        # M√©tricas tradicionales
        'pib': [],
        'inflacion': [],
        'desempleo': [],
        'dinero_consumidores': [],
        'dinero_empresas': [],
        'precios_promedio': [],
        'transacciones_totales': [],

        # M√©tricas del sistema bancario
        'credito_total': [],
        'depositos_totales': [],
        'morosidad': [],

        # M√©tricas sectoriales
        'pib_primario': [],
        'pib_secundario': [],
        'pib_terciario': [],

        # M√©tricas psicol√≥gicas
        'optimismo_promedio': [],
        'estres_financiero': [],
        'confianza_consumidor': [],

        # M√©tricas de innovaci√≥n
        'inversion_id': [],
        'productos_innovadores': [],
        'tecnologias_adoptadas': []
    }

    for ciclo in range(num_ciclos):
        print(f"\nüìÖ Ejecutando ciclo {ciclo + 1}/{num_ciclos}")

        try:
            mercado.ejecutar_ciclo(ciclo)

            # Recopilar m√©tricas tradicionales
            stats = mercado.obtener_estadisticas_completas()
            metricas['pib'].append(stats['pib_historico']
                                   [-1] if stats['pib_historico'] else 0)
            metricas['inflacion'].append(
                stats['inflacion_historica'][-1] if stats['inflacion_historica'] else 0)
            metricas['desempleo'].append(
                stats['desempleo_historico'][-1] if stats['desempleo_historico'] else 0)

            # Dinero por tipo de agente
            dinero_cons = [c.dinero for c in mercado.getConsumidores()]
            dinero_emp = [e.dinero for e in mercado.getEmpresas()]
            metricas['dinero_consumidores'].append(
                sum(dinero_cons) / len(dinero_cons) if dinero_cons else 0)
            metricas['dinero_empresas'].append(
                sum(dinero_emp) / len(dinero_emp) if dinero_emp else 0)

            # Precio promedio
            precios_todos = []
            for empresa in mercado.getEmpresas():
                precios_todos.extend(empresa.precios.values())
            metricas['precios_promedio'].append(
                sum(precios_todos) / len(precios_todos) if precios_todos else 0)

            # Transacciones
            trans_ciclo = len(
                [t for t in mercado.transacciones if t.get('ciclo') == ciclo])
            metricas['transacciones_totales'].append(trans_ciclo)

            # M√©tricas del sistema bancario
            if 'sistema_bancario' in stats:
                sb_stats = stats['sistema_bancario']
                metricas['credito_total'].append(
                    sb_stats.get('prestamos_totales', 0))
                metricas['depositos_totales'].append(
                    sb_stats.get('depositos_totales', 0))
                # Morosidad promedio de todos los bancos
                morosidad_promedio = 0
                if hasattr(mercado.sistema_bancario, 'bancos'):
                    morosidades = [b.morosidad_historica[-1] if b.morosidad_historica else 0
                                   for b in mercado.sistema_bancario.bancos]
                    morosidad_promedio = sum(
                        morosidades) / len(morosidades) if morosidades else 0
                metricas['morosidad'].append(morosidad_promedio)
            else:
                metricas['credito_total'].append(0)
                metricas['depositos_totales'].append(0)
                metricas['morosidad'].append(0)

            # M√©tricas sectoriales
            if 'sectores_economicos' in stats:
                sectores = stats['sectores_economicos']
                pib_primario = sum(
                    [s['pib'] for s in sectores.values() if s.get('tipo') == 'primario'])
                pib_secundario = sum(
                    [s['pib'] for s in sectores.values() if s.get('tipo') == 'secundario'])
                pib_terciario = sum(
                    [s['pib'] for s in sectores.values() if s.get('tipo') == 'terciario'])

                metricas['pib_primario'].append(pib_primario)
                metricas['pib_secundario'].append(pib_secundario)
                metricas['pib_terciario'].append(pib_terciario)
            else:
                metricas['pib_primario'].append(0)
                metricas['pib_secundario'].append(0)
                metricas['pib_terciario'].append(0)

            # M√©tricas psicol√≥gicas
            if 'psicologia_economica' in stats:
                psico_stats = stats['psicologia_economica']
                metricas['optimismo_promedio'].append(
                    psico_stats.get('optimismo_promedio', 0.5))
                metricas['estres_financiero'].append(
                    psico_stats.get('estres_promedio', 0))
                metricas['confianza_consumidor'].append(
                    psico_stats.get('indice_confianza', 0.5))
            else:
                metricas['optimismo_promedio'].append(0.5)
                metricas['estres_financiero'].append(0)
                metricas['confianza_consumidor'].append(0.5)

            # M√©tricas de innovaci√≥n
            if 'innovacion' in stats:
                innov_stats = stats['innovacion']
                metricas['inversion_id'].append(
                    innov_stats.get('inversion_id_total', 0))
                metricas['productos_innovadores'].append(
                    innov_stats.get('productos_innovadores', 0))
                metricas['tecnologias_adoptadas'].append(
                    innov_stats.get('tecnologias_disponibles', 0))
            else:
                metricas['inversion_id'].append(0)
                metricas['productos_innovadores'].append(0)
                metricas['tecnologias_adoptadas'].append(0)

            # Progreso cada 10 ciclos
            if (ciclo + 1) % 10 == 0:
                porcentaje = ((ciclo + 1) / num_ciclos) * 100
                print(f"   ‚è±Ô∏è  Progreso: {porcentaje:.1f}% completado")

                # Mostrar m√©tricas clave
                pib_actual = metricas['pib'][-1] if metricas['pib'] else 0
                optimismo = metricas['optimismo_promedio'][-1] if metricas['optimismo_promedio'] else 0
                credito = metricas['credito_total'][-1] if metricas['credito_total'] else 0

                print(
                    f"   üìä PIB: ${pib_actual:,.0f} | Optimismo: {optimismo:.2f} | Cr√©dito: ${credito:,.0f}")

        except Exception as e:
            print(f"   ‚ùå Error en ciclo {ciclo + 1}: {e}")
            continue

    tiempo_total = time.time() - inicio
    print(f"\n‚úÖ Simulaci√≥n avanzada completada en {tiempo_total:.2f} segundos")

    return metricas


def generar_analisis_avanzado(mercado, metricas):
    """Genera an√°lisis econ√≥mico con sistemas avanzados"""
    print("\nüìä AN√ÅLISIS ECON√ìMICO AVANZADO")
    print("=" * 70)

    # Estad√≠sticas b√°sicas
    pib_final = metricas['pib'][-1] if metricas['pib'] else 0
    pib_inicial = metricas['pib'][0] if metricas['pib'] else 0
    crecimiento_pib = ((pib_final - pib_inicial) /
                       pib_inicial * 100) if pib_inicial > 0 else 0

    inflacion_promedio = sum(
        metricas['inflacion']) / len(metricas['inflacion']) if metricas['inflacion'] else 0
    desempleo_promedio = sum(
        metricas['desempleo']) / len(metricas['desempleo']) if metricas['desempleo'] else 0

    print(f"üìà PIB Final: ${pib_final:,.2f}")
    print(f"üìä Crecimiento PIB: {crecimiento_pib:+.2f}%")
    print(f"üí∞ Inflaci√≥n Promedio: {inflacion_promedio:.2%}")
    print(f"üë• Desempleo Promedio: {desempleo_promedio:.2%}")

    # An√°lisis del sistema bancario
    print(f"\nüè¶ SISTEMA BANCARIO:")
    credito_final = metricas['credito_total'][-1] if metricas['credito_total'] else 0
    depositos_final = metricas['depositos_totales'][-1] if metricas['depositos_totales'] else 0
    morosidad_promedio = sum(
        metricas['morosidad']) / len(metricas['morosidad']) if metricas['morosidad'] else 0

    print(f"   üí≥ Cr√©dito Total: ${credito_final:,.2f}")
    print(f"   üèõÔ∏è Dep√≥sitos Totales: ${depositos_final:,.2f}")
    print(f"   ‚ö†Ô∏è Morosidad Promedio: {morosidad_promedio:.2%}")

    if credito_final > 0 and depositos_final > 0:
        ratio_credito_depositos = credito_final / depositos_final
        print(f"   üìä Ratio Cr√©dito/Dep√≥sitos: {ratio_credito_depositos:.2f}")

    # An√°lisis sectorial
    print(f"\nüè≠ ESTRUCTURA ECON√ìMICA SECTORIAL:")
    pib_sectores = {
        'Primario': metricas['pib_primario'][-1] if metricas['pib_primario'] else 0,
        'Secundario': metricas['pib_secundario'][-1] if metricas['pib_secundario'] else 0,
        'Terciario': metricas['pib_terciario'][-1] if metricas['pib_terciario'] else 0
    }

    pib_total_sectores = sum(pib_sectores.values())
    if pib_total_sectores > 0:
        for sector, pib_sector in pib_sectores.items():
            participacion = pib_sector / pib_total_sectores * 100
            print(f"   {sector}: {participacion:.1f}% (${pib_sector:,.0f})")

    # An√°lisis psicol√≥gico
    print(f"\nüß† ESTADO PSICOL√ìGICO DEL MERCADO:")
    optimismo_promedio = sum(metricas['optimismo_promedio']) / len(
        metricas['optimismo_promedio']) if metricas['optimismo_promedio'] else 0
    estres_promedio = sum(metricas['estres_financiero']) / len(
        metricas['estres_financiero']) if metricas['estres_financiero'] else 0
    confianza_promedio = sum(metricas['confianza_consumidor']) / len(
        metricas['confianza_consumidor']) if metricas['confianza_consumidor'] else 0

    print(f"   üòä Optimismo Promedio: {optimismo_promedio:.2f}")
    print(f"   üò∞ Estr√©s Financiero: {estres_promedio:.2f}")
    print(f"   ü§ù Confianza del Consumidor: {confianza_promedio:.2f}")

    # An√°lisis de innovaci√≥n
    print(f"\nüî¨ INNOVACI√ìN Y TECNOLOG√çA:")
    inversion_id_total = metricas['inversion_id'][-1] if metricas['inversion_id'] else 0
    productos_innovadores = metricas['productos_innovadores'][-1] if metricas['productos_innovadores'] else 0
    tecnologias_disponibles = metricas['tecnologias_adoptadas'][-1] if metricas['tecnologias_adoptadas'] else 0

    print(f"   üí∞ Inversi√≥n I+D Total: ${inversion_id_total:,.2f}")
    print(f"   üÜï Productos Innovadores: {productos_innovadores}")
    print(f"   ‚öôÔ∏è Tecnolog√≠as Disponibles: {tecnologias_disponibles}")

    if pib_final > 0:
        intensidad_id = inversion_id_total / pib_final * 100
        print(f"   üìä Intensidad I+D: {intensidad_id:.2f}% del PIB")

    # An√°lisis de competencia
    stats = mercado.obtener_estadisticas_completas()
    print("\nüèÜ AN√ÅLISIS DE COMPETENCIA:")
    for bien, nivel in mercado.nivel_competencia.items():
        estado = "Alta" if nivel > 0.7 else "Media" if nivel > 0.4 else "Baja"
        print(f"   {bien}: {estado} competencia (√≠ndice: {nivel:.2f})")

    # Resumen ejecutivo
    print(f"\nüìã RESUMEN EJECUTIVO:")
    print(
        f"   üéØ La econom√≠a simulada muestra caracter√≠sticas de una econom√≠a {determinar_tipo_economia(pib_sectores, optimismo_promedio, inversion_id_total/pib_final if pib_final > 0 else 0)}")
    print(
        f"   üìà Tendencia general: {'Expansiva' if crecimiento_pib > 0 else 'Contractiva'}")
    print(
        f"   üè¶ Sistema financiero: {'Estable' if morosidad_promedio < 0.1 else 'En riesgo'}")
    print(
        f"   üß† Sentimiento del mercado: {'Positivo' if optimismo_promedio > 0.6 else 'Neutro' if optimismo_promedio > 0.4 else 'Negativo'}")


def determinar_tipo_economia(pib_sectores, optimismo, intensidad_id):
    """Determina el tipo de econom√≠a basado en indicadores"""
    total_pib = sum(pib_sectores.values())
    if total_pib == 0:
        return "en desarrollo inicial"

    participacion_terciario = pib_sectores['Terciario'] / total_pib
    participacion_secundario = pib_sectores['Secundario'] / total_pib

    if participacion_terciario > 0.6 and intensidad_id > 0.02:
        return "post-industrial innovadora"
    elif participacion_terciario > 0.5:
        return "de servicios desarrollada"
    elif participacion_secundario > 0.4:
        return "industrial en crecimiento"
    else:
        return "primario-exportadora"


def crear_visualizaciones_avanzadas(metricas):
    """Crea gr√°ficos avanzados de an√°lisis econ√≥mico"""
    print("\nüìä Generando visualizaciones avanzadas...")

    # Configurar estilo
    plt.style.use('default')
    fig = plt.figure(figsize=(20, 16))

    # Layout de gr√°ficos 3x4
    gs = fig.add_gridspec(4, 3, hspace=0.3, wspace=0.3)

    ciclos = range(len(metricas['pib']))

    # 1. PIB y crecimiento
    ax1 = fig.add_subplot(gs[0, 0])
    ax1.plot(ciclos, metricas['pib'], 'b-',
             linewidth=2, marker='o', markersize=3)
    ax1.set_title('üìà Evoluci√≥n del PIB', fontweight='bold')
    ax1.set_ylabel('PIB ($)')
    ax1.grid(True, alpha=0.3)
    ax1.ticklabel_format(style='plain', axis='y')

    # 2. Inflaci√≥n vs Desempleo (Curva de Phillips)
    ax2 = fig.add_subplot(gs[0, 1])
    ax2.scatter([i*100 for i in metricas['inflacion']], [d*100 for d in metricas['desempleo']],
                alpha=0.6, c=range(len(ciclos)), cmap='viridis')
    ax2.set_title('üìä Curva de Phillips', fontweight='bold')
    ax2.set_xlabel('Inflaci√≥n (%)')
    ax2.set_ylabel('Desempleo (%)')
    ax2.grid(True, alpha=0.3)

    # 3. Sistema bancario
    ax3 = fig.add_subplot(gs[0, 2])
    ax3.plot(ciclos, metricas['credito_total'], 'g-',
             linewidth=2, label='Cr√©dito Total')
    ax3.plot(ciclos, metricas['depositos_totales'],
             'orange', linewidth=2, label='Dep√≥sitos')
    ax3.set_title('üè¶ Sistema Bancario', fontweight='bold')
    ax3.set_ylabel('Monto ($)')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    ax3.ticklabel_format(style='plain', axis='y')

    # 4. Estructura sectorial
    ax4 = fig.add_subplot(gs[1, 0])
    ax4.plot(ciclos, metricas['pib_primario'],
             'brown', linewidth=2, label='Primario')
    ax4.plot(ciclos, metricas['pib_secundario'],
             'gray', linewidth=2, label='Secundario')
    ax4.plot(ciclos, metricas['pib_terciario'],
             'purple', linewidth=2, label='Terciario')
    ax4.set_title('üè≠ PIB Sectorial', fontweight='bold')
    ax4.set_ylabel('PIB Sectorial ($)')
    ax4.legend()
    ax4.grid(True, alpha=0.3)

    # 5. Psicolog√≠a del mercado
    ax5 = fig.add_subplot(gs[1, 1])
    ax5.plot(ciclos, metricas['optimismo_promedio'],
             'green', linewidth=2, label='Optimismo')
    ax5.plot(ciclos, metricas['estres_financiero'],
             'red', linewidth=2, label='Estr√©s')
    ax5.plot(ciclos, metricas['confianza_consumidor'],
             'blue', linewidth=2, label='Confianza')
    ax5.set_title('üß† Psicolog√≠a Econ√≥mica', fontweight='bold')
    ax5.set_ylabel('√çndice (0-1)')
    ax5.legend()
    ax5.grid(True, alpha=0.3)

    # 6. Innovaci√≥n
    ax6 = fig.add_subplot(gs[1, 2])
    ax6.bar(ciclos[::5], [metricas['inversion_id'][i] for i in range(0, len(ciclos), 5)],
            alpha=0.7, color='cyan', label='Inversi√≥n I+D')
    ax6_twin = ax6.twinx()
    ax6_twin.plot(ciclos, metricas['productos_innovadores'], 'red', linewidth=2, marker='s',
                  markersize=3, label='Productos Nuevos')
    ax6.set_title('üî¨ Innovaci√≥n', fontweight='bold')
    ax6.set_ylabel('Inversi√≥n I+D ($)')
    ax6_twin.set_ylabel('Productos Innovadores')
    ax6.grid(True, alpha=0.3)

    # 7. Distribuci√≥n de riqueza
    ax7 = fig.add_subplot(gs[2, 0])
    ax7.plot(ciclos, metricas['dinero_consumidores'],
             'g-', linewidth=2, label='Consumidores')
    ax7.plot(ciclos, metricas['dinero_empresas'],
             'purple', linewidth=2, label='Empresas')
    ax7.set_title('üí∞ Distribuci√≥n de Riqueza', fontweight='bold')
    ax7.set_ylabel('Dinero Promedio ($)')
    ax7.legend()
    ax7.grid(True, alpha=0.3)

    # 8. Morosidad bancaria
    ax8 = fig.add_subplot(gs[2, 1])
    ax8.plot(ciclos, [m*100 for m in metricas['morosidad']],
             'red', linewidth=2, marker='^', markersize=3)
    ax8.set_title('‚ö†Ô∏è Morosidad Bancaria', fontweight='bold')
    ax8.set_ylabel('Morosidad (%)')
    ax8.axhline(y=5, color='orange', linestyle='--',
                alpha=0.7, label='Umbral Alerta 5%')
    ax8.axhline(y=10, color='red', linestyle='--',
                alpha=0.7, label='Umbral Crisis 10%')
    ax8.legend()
    ax8.grid(True, alpha=0.3)

    # 9. Actividad econ√≥mica total
    ax9 = fig.add_subplot(gs[2, 2])
    ax9.plot(ciclos, metricas['transacciones_totales'],
             'teal', linewidth=2, marker='d', markersize=3)
    ax9.set_title('üìä Actividad Econ√≥mica', fontweight='bold')
    ax9.set_ylabel('Transacciones por Ciclo')
    ax9.grid(True, alpha=0.3)

    # 10. An√°lisis de correlaci√≥n PIB vs Factores
    ax10 = fig.add_subplot(gs[3, :])

    # Normalizar datos para comparaci√≥n
    pib_norm = np.array(metricas['pib'])
    pib_norm = (pib_norm - np.min(pib_norm)) / (np.max(pib_norm) -
                                                np.min(pib_norm)) if np.max(pib_norm) > np.min(pib_norm) else pib_norm

    confianza_norm = np.array(metricas['confianza_consumidor'])
    credito_norm = np.array(metricas['credito_total'])
    credito_norm = (credito_norm - np.min(credito_norm)) / (np.max(credito_norm) -
                                                            np.min(credito_norm)) if np.max(credito_norm) > np.min(credito_norm) else credito_norm

    ax10.plot(ciclos, pib_norm, 'blue', linewidth=3, label='PIB (normalizado)')
    ax10.plot(ciclos, confianza_norm, 'green',
              linewidth=2, label='Confianza Consumidor')
    ax10.plot(ciclos, credito_norm, 'orange',
              linewidth=2, label='Cr√©dito (normalizado)')
    ax10.set_title('üîó Correlaciones Macroecon√≥micas',
                   fontweight='bold', size=14)
    ax10.set_xlabel('Ciclos')
    ax10.set_ylabel('Valores Normalizados (0-1)')
    ax10.legend()
    ax10.grid(True, alpha=0.3)

    plt.suptitle('AN√ÅLISIS ECON√ìMICO AVANZADO - SIMULACI√ìN MULTISISTEMA',
                 fontsize=18, fontweight='bold')

    # Guardar gr√°fico
    filename = f'economia_avanzada_{time.time():.0f}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    print(f"   üìä Gr√°fico guardado como {filename}")
    plt.show()

    print("   ‚úÖ Visualizaciones avanzadas generadas correctamente")


def main():
    """Funci√≥n principal de la simulaci√≥n avanzada"""
    print("üåü SIMULADOR ECON√ìMICO AVANZADO - VERSI√ìN MULTISISTEMA üåü")
    print("=" * 80)
    print("üìã Sistemas integrados:")
    print("   üè¶ Sistema bancario con cr√©dito y pol√≠tica monetaria")
    print("   üè≠ Sectores econ√≥micos diferenciados (primario, secundario, terciario)")
    print("   üß† Psicolog√≠a econ√≥mica con sesgos cognitivos")
    print("   üî¨ Sistema de innovaci√≥n y desarrollo tecnol√≥gico")
    print("   üìä An√°lisis macroecon√≥mico avanzado")
    print()

    # 1. Crear bienes avanzados
    bienes = crear_bienes_avanzados()
    print(
        f"‚úÖ Creados {len(bienes)} tipos de bienes con caracter√≠sticas econ√≥micas realistas")

    # 2. Inicializar mercado
    mercado = Mercado(bienes)
    print("‚úÖ Mercado inicializado con sistemas avanzados integrados")

    # 3. Configurar econom√≠a avanzada
    configurar_economia_avanzada(mercado)

    # 4. Ejecutar simulaci√≥n avanzada
    num_ciclos = 50  # Simulaci√≥n para observar efectos de largo plazo
    metricas = ejecutar_simulacion_avanzada(mercado, num_ciclos)

    # 5. An√°lisis avanzado
    generar_analisis_avanzado(mercado, metricas)

    # 6. Crear visualizaciones avanzadas
    crear_visualizaciones_avanzadas(metricas)

    # 7. Estad√≠sticas finales detalladas
    print("\nüìã ESTAD√çSTICAS FINALES DETALLADAS:")
    print("-" * 50)
    stats = mercado.obtener_estadisticas_completas()

    print(f"üîÑ Ciclos simulados: {num_ciclos}")
    print(f"üë• Agentes econ√≥micos totales: {len(mercado.personas)}")
    print(f"üè™ Bienes en el mercado: {len(bienes)}")
    print(f"üìä Transacciones registradas: {len(mercado.transacciones):,}")
    print(
        f"üè¶ Sistema bancario: {stats['sistema_bancario']['bancos_operando']} bancos activos")
    print(
        f"üè≠ Sectores econ√≥micos: {len(stats['sectores_economicos'])} sectores diferenciados")
    print(
        f"üî¨ Tecnolog√≠as disponibles: {stats['innovacion']['tecnologias_disponibles']}")

    if 'psicologia_economica' in stats:
        print(
            f"üß† Estado psicol√≥gico promedio: Optimismo {stats['psicologia_economica']['optimismo_promedio']:.2f}")

    print(f"üèõÔ∏è Reservas gubernamentales: ${mercado.gobierno.presupuesto:,.2f}")
    print(
        f"üìà Tasa de inter√©s actual: {mercado.gobierno.tasa_interes_referencia:.2%}")

    print("\nüéâ ¬°Simulaci√≥n econ√≥mica avanzada completada exitosamente!")
    print("    Los resultados muestran un ecosistema econ√≥mico multisistema")
    print("    con interacciones complejas entre agentes, psicolog√≠a, sectores,")
    print("    sistema financiero e innovaci√≥n tecnol√≥gica.")


if __name__ == "__main__":
    main()
