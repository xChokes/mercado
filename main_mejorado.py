"""
Simulaci√≥n econ√≥mica realista con leyes econ√≥micas implementadas
"""
import random
import time
import matplotlib.pyplot as plt
import numpy as np
from Mercado import Mercado
from Bien import Bien
from Consumidor import Consumidor
from Empresa import Empresa
from EmpresaProductora import EmpresaProductora
from ConfigEconomica import ConfigEconomica

def crear_bienes_realistas():
    """Crea bienes con caracter√≠sticas econ√≥micas realistas"""
    bienes = {}
    
    # Bienes b√°sicos
    bienes['Arroz'] = Bien('Arroz', 'alimentos_basicos')
    bienes['Papa'] = Bien('Papa', 'alimentos_basicos')
    bienes['Pan'] = Bien('Pan', 'alimentos_basicos')
    bienes['Leche'] = Bien('Leche', 'alimentos_basicos')
    bienes['Sal'] = Bien('Sal', 'alimentos_basicos')
    bienes['Aceite'] = Bien('Aceite', 'alimentos_basicos')
    bienes['Azucar'] = Bien('Azucar', 'alimentos_basicos')
    
    # Bienes de lujo alimentarios
    bienes['Carne'] = Bien('Carne', 'alimentos_lujo')
    bienes['Pollo'] = Bien('Pollo', 'alimentos_lujo')
    bienes['Huevos'] = Bien('Huevos', 'alimentos_lujo')
    bienes['Cafe'] = Bien('Cafe', 'alimentos_lujo')
    
    return bienes

def configurar_economia_inicial(mercado):
    """Configura el estado inicial de la econom√≠a"""
    print("üèóÔ∏è  Configurando econom√≠a inicial...")
    
    # Crear empresas productoras especializadas
    empresas_productoras = []
    for i in range(5):  # 5 empresas productoras
        nombre = f"ProductoraMega{i+1}"
        empresa = EmpresaProductora(nombre, mercado)
        mercado.agregar_persona(empresa)
        empresas_productoras.append(empresa)
        print(f"   ‚úÖ Creada {nombre} con capital inicial ${empresa.dinero:,.2f}")
    
    # Crear consumidores con caracter√≠sticas diversas
    consumidores = []
    for i in range(200):  # 200 consumidores para mayor realismo
        nombre = f"Consumidor{i+1}"
        consumidor = Consumidor(nombre, mercado)
        mercado.agregar_persona(consumidor)
        consumidores.append(consumidor)
        
        # Asignar empleos iniciales (80% empleados)
        if consumidor.empleado and empresas_productoras:
            empleador = random.choice(empresas_productoras)
            if empleador.contratar(consumidor):
                consumidor.empleador = empleador
                
    # Crear empresas de servicios/comercio
    for i in range(8):  # 8 empresas de servicios
        nombre = f"EmpresaComercial{i+1}"
        empresa = Empresa.crear_con_acciones(
            nombre=nombre, 
            mercado=mercado, 
            cantidad_acciones=1000, 
            bienes={}
        )
        mercado.agregar_persona(empresa)
        print(f"   ‚úÖ Creada {nombre} con capital inicial ${empresa.dinero:,.2f}")
    
    print(f"   üìä Total: {len(empresas_productoras)} productoras, {len(consumidores)} consumidores, 8 comerciales")
    print("   üéØ Econom√≠a inicial configurada correctamente")

def ejecutar_simulacion(mercado, num_ciclos=50):
    """Ejecuta la simulaci√≥n econ√≥mica completa"""
    print(f"\nüöÄ Iniciando simulaci√≥n econ√≥mica de {num_ciclos} ciclos...")
    inicio = time.time()
    
    # Almacenar m√©tricas
    metricas = {
        'pib': [],
        'inflacion': [],
        'desempleo': [],
        'dinero_consumidores': [],
        'dinero_empresas': [],
        'precios_promedio': [],
        'transacciones_totales': []
    }
    
    for ciclo in range(num_ciclos):
        print(f"\nüìÖ Ejecutando ciclo {ciclo + 1}/{num_ciclos}")
        
        try:
            mercado.ejecutar_ciclo(ciclo)
            
            # Recopilar m√©tricas
            stats = mercado.obtener_estadisticas_completas()
            metricas['pib'].append(stats['pib_historico'][-1] if stats['pib_historico'] else 0)
            metricas['inflacion'].append(stats['inflacion_historica'][-1] if stats['inflacion_historica'] else 0)
            metricas['desempleo'].append(stats['desempleo_historico'][-1] if stats['desempleo_historico'] else 0)
            
            # Dinero por tipo de agente
            dinero_cons = [c.dinero for c in mercado.getConsumidores()]
            dinero_emp = [e.dinero for e in mercado.getEmpresas()]
            metricas['dinero_consumidores'].append(sum(dinero_cons) / len(dinero_cons) if dinero_cons else 0)
            metricas['dinero_empresas'].append(sum(dinero_emp) / len(dinero_emp) if dinero_emp else 0)
            
            # Precio promedio
            precios_todos = []
            for empresa in mercado.getEmpresas():
                precios_todos.extend(empresa.precios.values())
            metricas['precios_promedio'].append(sum(precios_todos) / len(precios_todos) if precios_todos else 0)
            
            # Transacciones
            trans_ciclo = len([t for t in mercado.transacciones if t.get('ciclo') == ciclo])
            metricas['transacciones_totales'].append(trans_ciclo)
            
            # Progreso cada 10 ciclos
            if (ciclo + 1) % 10 == 0:
                porcentaje = ((ciclo + 1) / num_ciclos) * 100
                print(f"   ‚è±Ô∏è  Progreso: {porcentaje:.1f}% completado")
                
        except Exception as e:
            print(f"   ‚ùå Error en ciclo {ciclo + 1}: {e}")
            continue
    
    tiempo_total = time.time() - inicio
    print(f"\n‚úÖ Simulaci√≥n completada en {tiempo_total:.2f} segundos")
    
    return metricas

def generar_analisis_economico(mercado, metricas):
    """Genera an√°lisis econ√≥mico detallado"""
    print("\nüìä AN√ÅLISIS ECON√ìMICO FINAL")
    print("=" * 60)
    
    # Estad√≠sticas b√°sicas
    pib_final = metricas['pib'][-1] if metricas['pib'] else 0
    pib_inicial = metricas['pib'][0] if metricas['pib'] else 0
    crecimiento_pib = ((pib_final - pib_inicial) / pib_inicial * 100) if pib_inicial > 0 else 0
    
    inflacion_promedio = sum(metricas['inflacion']) / len(metricas['inflacion']) if metricas['inflacion'] else 0
    desempleo_promedio = sum(metricas['desempleo']) / len(metricas['desempleo']) if metricas['desempleo'] else 0
    
    print(f"üìà PIB Final: ${pib_final:,.2f}")
    print(f"üìä Crecimiento PIB: {crecimiento_pib:+.2f}%")
    print(f"üí∞ Inflaci√≥n Promedio: {inflacion_promedio:.2%}")
    print(f"üë• Desempleo Promedio: {desempleo_promedio:.2%}")
    
    # An√°lisis del mercado laboral
    empleados = sum([1 for c in mercado.getConsumidores() if c.empleado])
    total_consumidores = len(mercado.getConsumidores())
    tasa_empleo = empleados / total_consumidores if total_consumidores > 0 else 0
    
    print(f"üíº Tasa de Empleo Final: {tasa_empleo:.2%}")
    print(f"üè¢ Empresas Activas: {len(mercado.getEmpresas())}")
    
    # An√°lisis de competencia
    print("\nüèÜ AN√ÅLISIS DE COMPETENCIA:")
    for bien, nivel in mercado.nivel_competencia.items():
        estado = "Alta" if nivel > 0.7 else "Media" if nivel > 0.4 else "Baja"
        print(f"   {bien}: {estado} competencia (√≠ndice: {nivel:.2f})")
    
    # An√°lisis de ciclo econ√≥mico
    print(f"\nüîÑ FASE ECON√ìMICA ACTUAL: {mercado.fase_ciclo_economico.upper()}")
    if mercado.shock_economico_activo:
        print("‚ö†Ô∏è  SHOCK ECON√ìMICO EN CURSO")
    
    # Top empresas por capital
    empresas_ordenadas = sorted(mercado.getEmpresas(), 
                               key=lambda e: e.dinero, reverse=True)[:5]
    print("\nü•á TOP 5 EMPRESAS POR CAPITAL:")
    for i, empresa in enumerate(empresas_ordenadas, 1):
        print(f"   {i}. {empresa.nombre}: ${empresa.dinero:,.2f}")
    
    # Transacciones totales
    total_transacciones = len(mercado.transacciones)
    volumen_total = sum([t['costo_total'] for t in mercado.transacciones])
    print(f"\nüíµ Total Transacciones: {total_transacciones:,}")
    print(f"üí∞ Volumen Total: ${volumen_total:,.2f}")

def crear_visualizaciones(metricas):
    """Crea gr√°ficos de an√°lisis econ√≥mico"""
    print("\nüìä Generando visualizaciones...")
    
    # Configurar estilo
    plt.style.use('default')
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('AN√ÅLISIS ECON√ìMICO COMPLETO', fontsize=16, fontweight='bold')
    
    ciclos = range(len(metricas['pib']))
    
    # 1. PIB
    axes[0, 0].plot(ciclos, metricas['pib'], 'b-', linewidth=2, marker='o', markersize=3)
    axes[0, 0].set_title('üìà Evoluci√≥n del PIB', fontweight='bold')
    axes[0, 0].set_xlabel('Ciclos')
    axes[0, 0].set_ylabel('PIB ($)')
    axes[0, 0].grid(True, alpha=0.3)
    axes[0, 0].ticklabel_format(style='plain', axis='y')
    
    # 2. Inflaci√≥n
    axes[0, 1].plot(ciclos, [i*100 for i in metricas['inflacion']], 'r-', linewidth=2, marker='s', markersize=3)
    axes[0, 1].set_title('üî• Tasa de Inflaci√≥n', fontweight='bold')
    axes[0, 1].set_xlabel('Ciclos')
    axes[0, 1].set_ylabel('Inflaci√≥n (%)')
    axes[0, 1].grid(True, alpha=0.3)
    axes[0, 1].axhline(y=2, color='g', linestyle='--', alpha=0.7, label='Objetivo 2%')
    axes[0, 1].legend()
    
    # 3. Desempleo
    axes[0, 2].plot(ciclos, [d*100 for d in metricas['desempleo']], 'orange', linewidth=2, marker='^', markersize=3)
    axes[0, 2].set_title('üë• Tasa de Desempleo', fontweight='bold')
    axes[0, 2].set_xlabel('Ciclos')
    axes[0, 2].set_ylabel('Desempleo (%)')
    axes[0, 2].grid(True, alpha=0.3)
    axes[0, 2].axhline(y=5, color='g', linestyle='--', alpha=0.7, label='Objetivo 5%')
    axes[0, 2].legend()
    
    # 4. Dinero por agente
    axes[1, 0].plot(ciclos, metricas['dinero_consumidores'], 'g-', linewidth=2, label='Consumidores')
    axes[1, 0].plot(ciclos, metricas['dinero_empresas'], 'purple', linewidth=2, label='Empresas')
    axes[1, 0].set_title('üí∞ Dinero Promedio por Agente', fontweight='bold')
    axes[1, 0].set_xlabel('Ciclos')
    axes[1, 0].set_ylabel('Dinero Promedio ($)')
    axes[1, 0].grid(True, alpha=0.3)
    axes[1, 0].legend()
    axes[1, 0].ticklabel_format(style='plain', axis='y')
    
    # 5. Precios promedio
    axes[1, 1].plot(ciclos, metricas['precios_promedio'], 'brown', linewidth=2, marker='d', markersize=3)
    axes[1, 1].set_title('üí≤ Precios Promedio', fontweight='bold')
    axes[1, 1].set_xlabel('Ciclos')
    axes[1, 1].set_ylabel('Precio Promedio ($)')
    axes[1, 1].grid(True, alpha=0.3)
    
    # 6. Actividad econ√≥mica (transacciones)
    axes[1, 2].bar(ciclos[::5], metricas['transacciones_totales'][::5], alpha=0.7, color='teal')
    axes[1, 2].set_title('üìä Volumen de Transacciones', fontweight='bold')
    axes[1, 2].set_xlabel('Ciclos (cada 5)')
    axes[1, 2].set_ylabel('N√∫mero de Transacciones')
    axes[1, 2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(f'economia_simulacion_{time.time():.0f}.png', dpi=300, bbox_inches='tight')
    print("   üìä Gr√°fico guardado como economia_simulacion_[timestamp].png")
    plt.show()
    
    print("   ‚úÖ Visualizaciones generadas correctamente")

def main():
    """Funci√≥n principal de la simulaci√≥n"""
    print("üåü SIMULADOR ECON√ìMICO AVANZADO üåü")
    print("=" * 50)
    
    # 1. Crear bienes realistas
    bienes = crear_bienes_realistas()
    print(f"‚úÖ Creados {len(bienes)} tipos de bienes con caracter√≠sticas econ√≥micas realistas")
    
    # 2. Inicializar mercado
    mercado = Mercado(bienes)
    print("‚úÖ Mercado inicializado con gobierno y pol√≠ticas econ√≥micas")
    
    # 3. Configurar econom√≠a inicial
    configurar_economia_inicial(mercado)
    
    # 4. Ejecutar simulaci√≥n
    num_ciclos = 40  # Simulaci√≥n m√°s larga para ver efectos
    metricas = ejecutar_simulacion(mercado, num_ciclos)
    
    # 5. An√°lisis final
    generar_analisis_economico(mercado, metricas)
    
    # 6. Crear visualizaciones
    crear_visualizaciones(metricas)
    
    # 7. Estad√≠sticas finales detalladas
    print("\nüìã ESTAD√çSTICAS DETALLADAS:")
    print("-" * 40)
    stats = mercado.obtener_estadisticas_completas()
    
    print(f"üîÑ Ciclos simulados: {num_ciclos}")
    print(f"üë• Agentes econ√≥micos totales: {len(mercado.personas)}")
    print(f"üè™ Bienes en el mercado: {len(bienes)}")
    print(f"üìä Transacciones registradas: {len(mercado.transacciones):,}")
    print(f"üè¶ Reservas gubernamentales: ${mercado.gobierno.presupuesto:,.2f}")
    print(f"üìà Tasa de inter√©s actual: {mercado.gobierno.tasa_interes_referencia:.2%}")
    
    print("\nüéâ ¬°Simulaci√≥n econ√≥mica completada exitosamente!")
    print("    Los resultados muestran un ecosistema econ√≥mico funcional")
    print("    con leyes econ√≥micas realistas implementadas.")

if __name__ == "__main__":
    main()
