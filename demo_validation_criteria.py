#!/usr/bin/env python3
"""
Demostraci√≥n completa del sistema de validaci√≥n econ√≥mica
Verifica todos los criterios de aceptaci√≥n del issue #29
"""

import os
import sys
import json
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from src.utils.validators import ValidadorEconomicoFormal, validar_resultados_simulacion

def demostrar_criterios_aceptacion():
    """Demuestra que se cumplen todos los criterios de aceptaci√≥n"""
    
    print("üéØ DEMOSTRACI√ìN DE CRITERIOS DE ACEPTACI√ìN")
    print("=" * 60)
    
    # CRITERIO 1: Ejecuci√≥n produce reporte de validaci√≥n no vac√≠o
    print("\n1Ô∏è‚É£ CRITERIO: Ejecuci√≥n produce reporte de validaci√≥n no vac√≠o")
    print("-" * 50)
    
    datos_simulacion = {
        'pib': 150000,
        'inflacion': 3.2,
        'desempleo': 6.1,
        'empresas_activas': 4,
        'transacciones': 850,
        'depositos_bancarios': 600000,
        'prestamos_totales': 400000,
        'capital_bancario': 60000,
        'duracion_s': 65
    }
    
    reporte = validar_resultados_simulacion(datos_simulacion, "criterio_1")
    
    print(f"‚úÖ Reporte generado con {len(reporte['validaciones'])} validaciones")
    print(f"   Timestamp: {reporte['timestamp']}")
    print(f"   Estado: {reporte['estado_general']}")
    print(f"   Validaciones: {reporte['resumen']['total_validaciones']}")
    
    # CRITERIO 2: Escenarios de validaci√≥n pasan con warnings explicativos
    print("\n2Ô∏è‚É£ CRITERIO: Escenarios pasan con warnings explicativos")
    print("-" * 50)
    
    # Escenario con problemas menores (advertencias)
    datos_advertencia = {
        'pib': 250000,     # Alto pero no cr√≠tico
        'inflacion': 15,   # Algo alta
        'desempleo': 12,   # Un poco alto
        'empresas_activas': 2,  # Pocas pero no cero
        'transacciones': 50,    # Pocas
        'depositos_bancarios': 200000,
        'prestamos_totales': 220000,  # Ratio alto pero no cr√≠tico
        'capital_bancario': 18000,    # L√≠mite inferior
        'duracion_s': 90
    }
    
    reporte_advertencia = validar_resultados_simulacion(datos_advertencia, "escenario_advertencias")
    
    advertencias = [v for v in reporte_advertencia['validaciones'] if v['tipo'] == 'ADVERTENCIA']
    print(f"‚úÖ Escenario con advertencias: {len(advertencias)} warnings detectados")
    
    for adv in advertencias:
        print(f"   ‚ö†Ô∏è  {adv['indicador']}: {adv['mensaje']}")
    
    # CRITERIO 3: Tests cubren checks b√°sicos y nuevos KPIs
    print("\n3Ô∏è‚É£ CRITERIO: Tests cubren checks b√°sicos y nuevos KPIs")
    print("-" * 50)
    
    validador = ValidadorEconomicoFormal()
    
    # Test KPIs b√°sicos
    pib_result = validador.validar_pib(80000, "test_pib")
    inflacion_result = validador.validar_inflacion(4.5, "test_inflacion")
    
    print(f"‚úÖ Validaci√≥n PIB: {pib_result.tipo.value} - {pib_result.mensaje}")
    print(f"‚úÖ Validaci√≥n Inflaci√≥n: {inflacion_result.tipo.value} - {inflacion_result.mensaje}")
    
    # Test nuevos KPIs (sistema bancario)
    bancarios = validador.validar_sistema_bancario(500000, 300000, 50000, "test_bancario")
    print(f"‚úÖ Validaciones bancarias: {len(bancarios)} checks realizados")
    
    for check in bancarios:
        print(f"   üí∞ {check.indicador}: {check.tipo.value}")
    
    # Test consistencia stocks/flujos
    datos_consistencia = {
        'pib': 100000,
        'transacciones': 500,
        'empresas_activas': 3
    }
    consistencia = validador.validar_consistencia_stocks_flujos(datos_consistencia, "test_consistencia")
    print(f"‚úÖ Validaciones de consistencia: {len(consistencia)} checks realizados")
    
    # BONUS: Mostrar rangos de validaci√≥n
    print("\nüîç RANGOS DE VALIDACI√ìN IMPLEMENTADOS")
    print("-" * 50)
    
    rangos = ValidadorEconomicoFormal.RANGOS_KPIS
    for kpi, rango in rangos.items():
        print(f"   {kpi}: [{rango[0]:,} - {rango[1]:,}]")
    
    # BONUS: Demostrar guardado JSON autom√°tico
    print("\nüíæ DEMOSTRACI√ìN GUARDADO JSON AUTOM√ÅTICO")
    print("-" * 50)
    
    validador.ejecutar_validacion_completa(datos_simulacion, "demo_final")
    ruta_json = validador.guardar_reporte_json("results/validation_demo_criterios.json")
    
    if os.path.exists(ruta_json):
        with open(ruta_json, 'r') as f:
            contenido = json.load(f)
        
        print(f"‚úÖ Archivo JSON generado: {ruta_json}")
        print(f"   Tama√±o: {len(json.dumps(contenido, indent=2))} caracteres")
        print(f"   Estructura completa con: timestamp, resumen, validaciones, estado_general")
    
    print("\nüéâ TODOS LOS CRITERIOS DE ACEPTACI√ìN CUMPLIDOS")
    print("=" * 60)
    print("‚úÖ Ejecuci√≥n produce reporte de validaci√≥n no vac√≠o")
    print("‚úÖ Escenarios de validaci√≥n pasan con warnings explicativos")
    print("‚úÖ Tests cubren checks b√°sicos y nuevos KPIs")
    print("‚úÖ BONUS: Sistema completo de ranges, JSON, integraci√≥n")

if __name__ == "__main__":
    try:
        demostrar_criterios_aceptacion()
    except Exception as e:
        print(f"\n‚ùå Error en demostraci√≥n: {e}")
        import traceback
        traceback.print_exc()