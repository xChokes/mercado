"""
SIMULADOR ECON√ìMICO AVANZADO v3.0 - SISTEMA DE AGENTES IA HIPERREALISTAS
=========================================================================

Simulaci√≥n econ√≥mica hiperrealista con todas las mejoras implementadas:
- ‚úÖ Sistema ML con datos sint√©ticos garantizados
- ‚úÖ Sistema de precios din√°micos 
- ‚úÖ Configuraci√≥n externa via JSON
- ‚úÖ Dashboard avanzado con m√∫ltiples m√©tricas
- ‚úÖ Sistema de crisis mejorado
- ‚úÖ Mercado laboral activado
- ‚úÖ Sistema bancario completamente funcional
- ‚úÖ Sistema de logging avanzado
- üöÄ NUEVO: Banco Central con pol√≠tica monetaria autom√°tica
- üöÄ NUEVO: Control de precios realista con inercia
- üöÄ NUEVO: Ciclos econ√≥micos genuinos (4 fases)
- üöÄ NUEVO: Sistema de rescate empresarial
- ü§ñ NUEVO v3.0: SISTEMA DE AGENTES IA HIPERREALISTAS
  - üß† Motor de decisiones con redes neuronales
  - üíæ Sistema de memoria avanzado para agentes
  - üåê Protocolos de comunicaci√≥n entre agentes
  - üì± Redes sociales virtuales y formaci√≥n de coaliciones
  - üéØ Deep Learning para predicci√≥n y adaptaci√≥n
  - ‚ö° Coordinaci√≥n inteligente de mercado en tiempo real

Autor: Simulador Econ√≥mico Team
Versi√≥n: 3.0 - Agentes IA Hiperrealistas
"""

from src.config.ConfiguradorSimulacion import ConfiguradorSimulacion
from src.utils.SimuladorLogger import SimuladorLogger
from src.systems.PreciosDinamicos import integrar_sistema_precios_dinamicos, actualizar_precios_mercado
from src.systems.VisualizacionAvanzada import DashboardEconomico, VisualizadorTiempoReal, exportar_resultados_completos
from src.systems.EstimuloEconomico import detectar_estancamiento_economico, aplicar_estimulo_emergencia
from src.systems.CrisisFinanciera import evaluar_recuperacion_crisis, aplicar_medidas_recuperacion, evaluar_riesgo_sistemico
from src.systems.MercadoLaboral import MercadoLaboral
from src.systems.labor_market import EnhancedLaborMarket
from src.systems.AnalyticsML import SistemaAnalyticsML
from src.systems.SistemaBancario import SistemaBancario, Banco
# NUEVOS SISTEMAS HIPERREALISTAS v3.0
from src.systems.BancoCentral import BancoCentral
from src.systems.ControlPreciosRealista import ControladorPreciosRealista
from src.systems.CicloEconomicoRealista import CicloEconomicoRealista
from src.systems.GestorRescateEmpresarial import GestorRescateEmpresarial
from src.systems.SistemaFiscal import SistemaFiscal
from src.systems.MercadoCapitales import BolsaValores
from src.systems.ClasesSociales import SistemaClasesSociales
# NUEVOS SISTEMAS DE VALIDACI√ìN Y ESTABILIZACI√ìN v3.1
from src.systems.ValidadorEconomico import ValidadorEconomico
from src.systems.BancoCentralAvanzado import BancoCentralAvanzado
# NUEVOS SISTEMAS ECON√ìMICOS AVANZADOS v3.2 - FASE 2
try:
    from src.systems.ModelosEconomicosAvanzados import IntegradorModelosEconomicos, ParametrosEconomicos
    from src.config.DatosEconomicosReales import CalibradorEconomicoRealista
    MODELOS_ECONOMICOS_DISPONIBLES = True
except ImportError:
    MODELOS_ECONOMICOS_DISPONIBLES = False
# SISTEMA DE AGENTES IA HIPERREALISTAS v3.0
from src.ai.IntegradorAgentesIA import IntegradorAgentesIA, ConfiguracionSistemaIA
from src.models.Gobierno import Gobierno
from src.models.EmpresaProductora import EmpresaProductora
from src.models.EmpresaProductoraHiperrealista import EmpresaProductoraHiperrealista
from src.models.Empresa import Empresa
from src.models.Consumidor import Consumidor
from src.models.Bien import Bien
from src.models.Mercado import Mercado
from src.utils.SimuladorLogger import init_logging, get_simulador_logger, close_logging
import sys
import os
import time
import random
import logging
import matplotlib.pyplot as plt
import argparse
import json

# A√±adir src al path de Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Inicializar logger global
logger = SimuladorLogger()

# Importaciones principales

# Sistemas avanzados

# Configuraci√≥n


def crear_bienes_expandidos():
    """Crea cat√°logo expandido de 45+ bienes en m√∫ltiples categor√≠as"""
    bienes = {}

    logger.log_configuracion("Creando cat√°logo expandido de bienes...")

    # ALIMENTOS B√ÅSICOS (10 bienes)
    alimentos_basicos = [
        'Arroz', 'Papa', 'Pan', 'Leche', 'Sal', 'Aceite', 'Azucar',
        'Agua', 'Harina', 'Frijoles'
    ]
    for nombre in alimentos_basicos:
        bienes[nombre] = Bien(nombre, 'alimentos_basicos')

    # ALIMENTOS DE LUJO (10 bienes)
    alimentos_lujo = [
        'Carne', 'Pollo', 'Huevos', 'Cafe', 'Pescado', 'Queso',
        'Chocolate', 'Vino', 'Frutas', 'Verduras'
    ]
    for nombre in alimentos_lujo:
        bienes[nombre] = Bien(nombre, 'alimentos_lujo')

    # BIENES MANUFACTURADOS (8 bienes)
    manufacturados = [
        'Ropa', 'Calzado', 'Muebles', 'Electrodomesticos',
        'Libros', 'Herramientas', 'Juguetes', 'Medicinas'
    ]
    for nombre in manufacturados:
        bienes[nombre] = Bien(nombre, 'bienes_duraderos')

    # TECNOLOG√çA (7 bienes)
    tecnologia = [
        'Computadora', 'Telefono', 'Television', 'Internet',
        'Software', 'Videojuegos', 'Electronica'
    ]
    for nombre in tecnologia:
        bienes[nombre] = Bien(nombre, 'tecnologia')

    # SERVICIOS B√ÅSICOS (8 bienes)
    servicios = [
        'Transporte', 'Educacion', 'Salud', 'Vivienda',
        'Electricidad', 'Gas', 'Seguridad', 'Comunicaciones'
    ]
    for nombre in servicios:
        bienes[nombre] = Bien(nombre, 'servicios')

    # SERVICIOS DE LUJO (6 bienes)
    servicios_lujo = [
        'Entretenimiento', 'Turismo', 'Restaurante',
        'Gimnasio', 'Spa', 'Arte'
    ]
    for nombre in servicios_lujo:
        bienes[nombre] = Bien(nombre, 'servicios_lujo')

    # BIENES DE CAPITAL E INTERMEDIOS (6 bienes)
    capital_intermedio = [
        ('Maquinaria', 'capital'),
        ('Materias_Primas', 'intermedio'),
        ('Energia', 'intermedio'),
        ('Acero', 'intermedio'),
        ('Cemento', 'intermedio'),
        ('Combustible', 'intermedio')
    ]
    for nombre, categoria in capital_intermedio:
        bienes[nombre] = Bien(nombre, categoria)

    logger.log_configuracion(
        f"Cat√°logo creado: {len(bienes)} bienes en {len(set(b.categoria for b in bienes.values()))} categor√≠as")
    return bienes


def configurar_economia_avanzada(mercado, config):
    """Configura la econom√≠a con par√°metros del archivo de configuraci√≥n"""
    logger.log_configuracion("Configurando econom√≠a avanzada...")

    # Obtener configuraci√≥n
    sim_config = config.obtener_seccion('simulacion')
    eco_config = config.obtener_seccion('economia')
    banco_config = config.obtener_seccion('sistema_bancario')

    # === CONSUMIDORES ===
    num_consumidores = sim_config.get('num_consumidores', 250)
    dinero_config = eco_config.get('dinero_inicial_consumidores', {
                                   'min': 5000, 'max': 15000})

    logger.log_configuracion(f"Creando {num_consumidores} consumidores...")
    for i in range(num_consumidores):
        consumidor = Consumidor(f'Consumidor_{i+1}', mercado)
        # Dinero inicial aleatorio en el rango configurado
        consumidor.dinero = random.uniform(
            dinero_config['min'], dinero_config['max'])
        consumidor.ingreso_mensual = random.uniform(2000, 8000)
        mercado.agregar_persona(consumidor)

    # === EMPRESAS PRODUCTORAS HIPERREALISTAS ===
    num_empresas_prod = sim_config.get('num_empresas_productoras', 5)
    capital_config = eco_config.get('capital_inicial_empresas', {
                                    'min': 100000, 'max': 1500000})

    logger.log_configuracion(
        f"Creando {num_empresas_prod} empresas productoras hiperrealistas...")
    empresas = []
    for i in range(num_empresas_prod):
        # Usar empresas hiperrealistas por defecto
        if sim_config.get('usar_empresas_hiperrealistas', True):
            empresa = EmpresaProductoraHiperrealista(f'Productora_Hiperrealista_{i+1}', mercado)
        else:
            empresa = EmpresaProductora(f'Productora_{i+1}', mercado)
            
        empresa.dinero = random.uniform(
            capital_config['min'], capital_config['max'])
        mercado.agregar_persona(empresa)
        empresas.append(empresa)

    # === EMPRESAS COMERCIALES ===
    num_empresas_com = sim_config.get('num_empresas_comerciales', 8)

    logger.log_configuracion(
        f"Creando {num_empresas_com} empresas comerciales...")
    for i in range(num_empresas_com):
        # Seleccionar algunos bienes aleatorios para vender
        bienes_empresa = random.sample(list(mercado.bienes.keys()),
                                       random.randint(3, 8))
        bienes_dict = {bien: [] for bien in bienes_empresa}

        empresa = Empresa.crear_con_acciones(
            f'Comercial_{i+1}', mercado, 1000, bienes_dict
        )
        empresa.dinero = random.uniform(50000, 300000)
        mercado.agregar_persona(empresa)
        empresas.append(empresa)

    # === SISTEMA BANCARIO ===
    if banco_config.get('activar', True):
        logger.log_configuracion("Configurando sistema bancario...")
        mercado.sistema_bancario = SistemaBancario(mercado)

        # El SistemaBancario ya crea los bancos autom√°ticamente
        num_bancos = len(mercado.sistema_bancario.bancos)
        capital_total = sum(
            banco.capital for banco in mercado.sistema_bancario.bancos)

        logger.log_configuracion(
            f"{num_bancos} bancos creados con capital total ${capital_total:,}")

    # === GOBIERNO ===
    logger.log_configuracion("Configurando gobierno...")
    mercado.gobierno = Gobierno(mercado)
    mercado.gobierno.presupuesto = eco_config.get(
        'pib_inicial', 100000) * 0.3  # 30% del PIB inicial

    # === CONTRATACIONES INICIALES ===
    logger.log_configuracion("Ejecutando contrataciones iniciales...")
    tasa_empleo_objetivo = 1 - eco_config.get('tasa_desempleo_inicial', 0.15)
    empleos_objetivo = int(num_consumidores * tasa_empleo_objetivo)

    consumidores_desempleados = [
        c for c in mercado.getConsumidores() if not c.empleado]
    empleos_creados = 0

    for empresa in empresas:
        if empleos_creados >= empleos_objetivo:
            break

        # Cada empresa contrata entre 5-20 empleados
        contrataciones_empresa = min(
            random.randint(5, 20),
            len(consumidores_desempleados),
            empleos_objetivo - empleos_creados
        )

        for _ in range(contrataciones_empresa):
            if consumidores_desempleados:
                trabajador = consumidores_desempleados.pop(0)
                if empresa.contratar(trabajador):
                    empleos_creados += 1

    tasa_desempleo_real = (
        len(consumidores_desempleados) / num_consumidores) * 100
    logger.log_configuracion(
        f"Tasa de desempleo inicial: {tasa_desempleo_real:.1f}%")

    return empresas


def integrar_sistemas_avanzados(mercado, config):
    """Integra todos los sistemas avanzados"""
    logger.log_configuracion("Integrando sistemas avanzados...")

    # === NUEVO: SISTEMA DE VALIDACI√ìN ECON√ìMICA ===
    logger.log_configuracion("Activando sistema de validaci√≥n econ√≥mica...")
    mercado.validador_economico = ValidadorEconomico()
    
    # === NUEVO: BANCO CENTRAL AVANZADO ===
    logger.log_configuracion("Activando Banco Central Avanzado con Taylor Rule...")
    mercado.banco_central_avanzado = BancoCentralAvanzado(mercado)
    
    # === NUEVOS: MODELOS ECON√ìMICOS AVANZADOS - FASE 2 ===
    if MODELOS_ECONOMICOS_DISPONIBLES:
        logger.log_configuracion("üßÆ Activando modelos econ√≥micos avanzados (DSGE, IS-LM)...")
        mercado.integrador_modelos = IntegradorModelosEconomicos()
        mercado.calibrador_economico = CalibradorEconomicoRealista()
        
        # Calibrar configuraci√≥n con datos reales
        config_dict = config.config
        config_calibrada = mercado.calibrador_economico.calibrar_configuracion_base(config_dict)
        
        # Actualizar configuraci√≥n del mercado con par√°metros calibrados
        if 'economia' in config_calibrada:
            eco_config = config_calibrada['economia']
            mercado.tasa_inflacion_objetivo = eco_config.get('tasa_inflacion_objetivo', 0.025)
            mercado.crecimiento_pib_objetivo = eco_config.get('crecimiento_pib_objetivo', 0.025)
            mercado.volatilidad_economica = eco_config.get('volatilidad_economica', 0.15)
        
        logger.log_configuracion("‚úÖ Modelos econ√≥micos profesionales ACTIVADOS")
    else:
        logger.log_configuracion("‚ö†Ô∏è  Modelos econ√≥micos avanzados NO DISPONIBLES")

    # === MACHINE LEARNING ===
    ml_config = config.obtener_seccion('machine_learning')
    if ml_config.get('activar', True):
        logger.log_configuracion("Activando sistema de Machine Learning...")
        mercado.analytics_ml = SistemaAnalyticsML(mercado)

        # Entrenar modelos iniciales con datos sint√©ticos
        logger.log_configuracion("Entrenando modelos ML iniciales...")
        modelos_entrenados = 0
        # Entrenar primeros 10 bienes
        for bien_nombre in list(mercado.bienes.keys())[:10]:
            if mercado.analytics_ml.predictor_demanda.get(bien_nombre) is None:
                from src.systems.AnalyticsML import PredictorDemanda
                mercado.analytics_ml.predictor_demanda[bien_nombre] = PredictorDemanda(
                )

            if mercado.analytics_ml.predictor_demanda[bien_nombre].entrenar(mercado, bien_nombre):
                modelos_entrenados += 1

        logger.log_configuracion(
            f"{modelos_entrenados} modelos ML entrenados exitosamente")

    # === MERCADO LABORAL ===
    logger.log_configuracion("Activando mercado laboral avanzado...")
    mercado.mercado_laboral = MercadoLaboral(mercado)

    # === ENHANCED LABOR MARKET with DMP-style matching ===
    logger.log_configuracion("Activando sistema de mercado laboral mejorado con emparejamiento DMP...")
    mercado.enhanced_labor_market = EnhancedLaborMarket(mercado)

    # Asignar perfiles de habilidades a consumidores
    for consumidor in mercado.getConsumidores():
        if not hasattr(consumidor, 'perfil_habilidades'):
            consumidor.perfil_habilidades = mercado.mercado_laboral.crear_perfil()
            # 50% probabilidad de afiliaci√≥n sindical
            mercado.mercado_laboral.asignar_sindicato(consumidor)

    # === SISTEMA DE PRECIOS DIN√ÅMICOS ===
    logger.log_configuracion("Configurando sistema de precios din√°micos...")
    sistema_precios = integrar_sistema_precios_dinamicos(mercado)

    # Asignar precios iniciales a todas las empresas
    precios_asignados = 0
    for empresa in mercado.getEmpresas():
        if hasattr(empresa, 'bienes') and empresa.bienes:
            for bien_nombre in empresa.bienes.keys():
                if bien_nombre in mercado.bienes:
                    precio_base = sistema_precios.precios_base.get(
                        bien_nombre, 10)
                    empresa.precios[bien_nombre] = precio_base * \
                        random.uniform(0.8, 1.2)
                    precios_asignados += 1

    logger.log_configuracion(
        f"{precios_asignados} precios din√°micos asignados")

    # === DASHBOARD ===
    logger.log_configuracion("Configurando dashboard avanzado...")
    mercado.dashboard = DashboardEconomico(mercado)

    # === SISTEMAS HIPERREALISTAS v3.0 ===
    logger.log_configuracion("üöÄ INTEGRANDO SISTEMAS HIPERREALISTAS v3.0...")
    
    # 1. BANCO CENTRAL - Pol√≠tica monetaria autom√°tica
    logger.log_configuracion("üè¶ Configurando Banco Central...")
    mercado.banco_central = BancoCentral(mercado)
    logger.log_configuracion(f"   Banco Central creado - Tasa inicial: {mercado.banco_central.tasa_interes_base:.2%}")
    
    # 2. CONTROLADOR DE PRECIOS REALISTA - Inercia y l√≠mites
    logger.log_configuracion("üí∞ Configurando Control de Precios Realista...")
    mercado.controlador_precios = ControladorPreciosRealista(mercado)
    logger.log_configuracion(f"   Control activado - Inercia: {mercado.controlador_precios.inercia_precios:.1%}")
    
    # 3. GESTOR DE CICLO ECON√ìMICO - 4 fases reales
    logger.log_configuracion("üìä Configurando Ciclo Econ√≥mico Realista...")
    mercado.gestor_ciclo = CicloEconomicoRealista(mercado)
    logger.log_configuracion(f"   Fase inicial: {mercado.gestor_ciclo.fase_actual.value}")
    
    # 4. GESTOR DE RESCATE EMPRESARIAL - Prevenir colapso
    logger.log_configuracion("üöë Configurando Sistema de Rescate Empresarial...")
    mercado.gestor_rescate = GestorRescateEmpresarial(mercado)
    logger.log_configuracion(f"   Fondo rescate: {mercado.gestor_rescate.fondo_rescate_porcentaje:.1%} del PIB")
    
    # === SISTEMA DE AGENTES IA HIPERREALISTAS v3.0 ===
    logger.log_configuracion("ü§ñ CONFIGURANDO SISTEMA DE AGENTES IA HIPERREALISTAS v3.0...")
    ia_config = config.obtener_seccion('agentes_ia')
    if ia_config.get('activar', True):
        try:
            # Configuraci√≥n del sistema de IA
            configuracion_ia = ConfiguracionSistemaIA(
                num_consumidores_ia=ia_config.get('num_consumidores', 15),
                num_empresas_ia=ia_config.get('num_empresas', 6),
                activar_deep_learning=ia_config.get('deep_learning', True),
                activar_redes_sociales=ia_config.get('redes_sociales', True),
                activar_coaliciones=ia_config.get('coaliciones', True),
                activar_logs_detallados=ia_config.get('logs_detallados', True),
                duracion_simulacion_minutos=ia_config.get('duracion_minutos', 3)
            )
            
            # Crear bienes para el sistema de IA
            bienes_ia = list(mercado.bienes.keys())[:10]  # Usar los primeros 10 bienes
            
            # Inicializar sistema integrador de IA
            mercado.sistema_ia = IntegradorAgentesIA(bienes_ia, configuracion_ia)
            logger.log_configuracion(f"   ‚úÖ Sistema IA creado con {configuracion_ia.num_consumidores_ia} consumidores y {configuracion_ia.num_empresas_ia} empresas")
            logger.log_configuracion(f"   ‚úÖ Deep Learning: {configuracion_ia.activar_deep_learning}")
            logger.log_configuracion(f"   ‚úÖ Redes Sociales: {configuracion_ia.activar_redes_sociales}")
            logger.log_configuracion(f"   ‚úÖ Coaliciones: {configuracion_ia.activar_coaliciones}")
            
        except Exception as e:
            logger.log_error(f"   ‚ùå Error integrando sistema IA: {e}")
            mercado.sistema_ia = None
    else:
        logger.log_configuracion("   üö´ Sistema de IA desactivado en configuraci√≥n")
        mercado.sistema_ia = None
    
    logger.log_configuracion("üéØ HIPERREALISMO IMPLEMENTADO - Simulador transformado")

    logger.log_configuracion("Todos los sistemas avanzados integrados")

    # === MERCADO DE CAPITALES ===
    # Instanciar bolsa y listar empresas una vez creadas
    try:
        logger.log_configuracion("üìà Configurando Mercado de Capitales...")
        mercado.bolsa_valores = BolsaValores(mercado)
        mercado.bolsa_valores.listar_empresas()
        logger.log_configuracion("   Bolsa de Valores activa y empresas listadas")
    except Exception as e:
        logger.log_error(f"   ‚ùå No se pudo activar la Bolsa de Valores: {e}")


def ejecutar_simulacion_completa(config, prefijo_resultados: str | None = None):
    """Ejecuta la simulaci√≥n completa con todas las mejoras hiperrealistas v3.0"""
    logger.log_inicio("INICIANDO SIMULACI√ìN ECON√ìMICA HIPERREALISTA v3.0")
    logger.log_inicio("=" * 70)

    # Inicializar sistema de logging (ya tenemos uno global, pero mantenemos el local para compatibilidad)
    local_logger = SimuladorLogger()
    local_logger.log_inicio("Simulaci√≥n Econ√≥mica Hiperrealista v3.0 iniciada")

    tiempo_inicio = time.time()

    # === CONFIGURACI√ìN INICIAL ===
    # Crear bienes expandidos primero
    bienes = crear_bienes_expandidos()

    # Crear mercado con bienes
    mercado = Mercado(bienes)

    # Configurar econom√≠a
    empresas = configurar_economia_avanzada(mercado, config)

    # Integrar sistemas avanzados
    integrar_sistemas_avanzados(mercado, config)

    # === CONFIGURACI√ìN DE SIMULACI√ìN ===
    sim_config = config.obtener_seccion('simulacion')
    num_ciclos = sim_config.get('num_ciclos', 50)
    frecuencia_reportes = sim_config.get('frecuencia_reportes', 5)

    # Visualizador en tiempo real (opcional)
    usar_tiempo_real = False  # Cambiar a True para gr√°ficos en tiempo real
    if usar_tiempo_real:
        visualizador_tiempo_real = VisualizadorTiempoReal()

    logger.log_configuracion(f"Ejecutando {num_ciclos} ciclos econ√≥micos...")
    logger.log_configuracion("=" * 60)

    # Logging inicial de configuraci√≥n
    local_logger.log_configuracion(
        f"Simulaci√≥n configurada con {num_ciclos} ciclos")
    local_logger.log_configuracion(
        f"Empresas creadas: {len(mercado.getEmpresas())}")
    local_logger.log_configuracion(
        f"Consumidores creados: {len(mercado.getConsumidores())}")
    local_logger.log_configuracion(
        f"Bienes disponibles: {len(mercado.bienes)}")

    # === EJECUCI√ìN PRINCIPAL ===
    for ciclo in range(1, num_ciclos + 1):
        # Log inicio de ciclo
        local_logger.log_ciclo(f"=== INICIANDO CICLO {ciclo}/{num_ciclos} ===")

        # === SISTEMAS AUTOM√ÅTICOS ===

        # === SISTEMAS HIPERREALISTAS v3.0 (EJECUTAR PRIMERO) ===
        
        # 1. BANCO CENTRAL - Pol√≠tica monetaria autom√°tica cada ciclo
        if hasattr(mercado, 'banco_central'):
            decision_bc = mercado.banco_central.ejecutar_politica_monetaria(ciclo)
            if decision_bc['accion_tomada']:
                local_logger.log_sistema(f"üè¶ Banco Central - Ciclo {ciclo}: {decision_bc['descripcion']}")
                local_logger.log_sistema(f"   Nueva tasa: {decision_bc['nueva_tasa']:.2f}%, Justificaci√≥n: {decision_bc['justificacion']}")
        
        # 2. CICLO ECON√ìMICO REALISTA - Gestionar transiciones de fase
        if hasattr(mercado, 'gestor_ciclo'):
            fase_anterior = mercado.gestor_ciclo.fase_actual.value
            cambio_fase = mercado.gestor_ciclo.procesar_ciclo_economico(ciclo)
            if cambio_fase['transicion_ocurrida']:
                local_logger.log_sistema(f"üìä Ciclo Econ√≥mico - Ciclo {ciclo}: {fase_anterior} ‚Üí {cambio_fase['nueva_fase']}")
                local_logger.log_sistema(f"   Duraci√≥n fase anterior: {cambio_fase['duracion_fase_anterior']} ciclos")
                local_logger.log_sistema(f"   Efectos econ√≥micos aplicados: {cambio_fase['efectos_aplicados']}")
        
        # 3. SISTEMA DE AGENTES IA HIPERREALISTAS v3.0 - ALGORITMO AVANZADO COMPLETO
        if hasattr(mercado, 'sistema_ia') and mercado.sistema_ia is not None:
            try:
                local_logger.log_sistema(f"ü§ñ Ejecutando IA Avanzada - Ciclo {ciclo}")
                
                # === FASE 1: ACTUALIZACI√ìN DEL CONOCIMIENTO DEL MERCADO ===
                # Sincronizar datos del mercado tradicional con los agentes IA
                mercado.sistema_ia._sincronizar_estado_mercado(mercado, ciclo)
                
                # === FASE 2: EJECUCI√ìN COORDINADA DE AGENTES IA ===
                resultado_ia = mercado.sistema_ia.ejecutar_ciclo_coordinado(mercado, ciclo)
                
                # === FASE 3: AN√ÅLISIS INTELIGENTE Y TOMA DE DECISIONES ===
                # Los agentes IA analizan el mercado y toman decisiones aut√≥nomas
                decisiones_consumidores = mercado.sistema_ia._procesar_decisiones_consumidores_ia(ciclo)
                decisiones_empresas = mercado.sistema_ia._procesar_decisiones_empresas_ia(ciclo)
                
                # === FASE 4: INTEGRACI√ìN CON MERCADO TRADICIONAL ===
                # Aplicar las decisiones de IA al mercado tradicional
                transacciones_ia = mercado.sistema_ia._aplicar_decisiones_al_mercado(
                    mercado, decisiones_consumidores, decisiones_empresas, ciclo
                )
                
                # === FASE 5: APRENDIZAJE Y ADAPTACI√ìN ===
                # El sistema IA aprende de los resultados y se adapta
                mercado.sistema_ia._actualizar_aprendizaje_global(resultado_ia, transacciones_ia, ciclo)
                
                # === REPORTE AVANZADO DE IA (cada 3 ciclos) ===
                if ciclo % 3 == 0:
                    stats_ia = mercado.sistema_ia._obtener_estadisticas_completas()
                    local_logger.log_sistema(f"ü§ñ IA AVANZADA - Ciclo {ciclo}:")
                    local_logger.log_sistema(f"   üë• Agentes Activos: {stats_ia['agentes_activos']}")
                    local_logger.log_sistema(f"   üí∞ Transacciones IA: {stats_ia['transacciones_ia']}")
                    local_logger.log_sistema(f"   üéØ Eficiencia Global: {stats_ia['eficiencia_global']:.3f}")
                    local_logger.log_sistema(f"   üß† Redes Neuronales: {stats_ia['redes_neuronales']}")
                    local_logger.log_sistema(f"   üåê Relaciones Sociales: {stats_ia['relaciones_sociales']}")
                    local_logger.log_sistema(f"   ü§ù Coaliciones Activas: {stats_ia['coaliciones_activas']}")
                    local_logger.log_sistema(f"   üìä Predicciones Precisas: {stats_ia['precision_predicciones']:.1%}")
                    local_logger.log_sistema(f"   üîÑ Adaptaciones por Ciclo: {stats_ia['adaptaciones_ciclo']}")
                
                # === AN√ÅLISIS PREDICTIVO AVANZADO (cada 10 ciclos) ===
                if ciclo % 10 == 0:
                    predicciones = mercado.sistema_ia._generar_predicciones_mercado(ciclo, horizonte=5)
                    local_logger.log_sistema(f"üîÆ PREDICCIONES IA (pr√≥ximos 5 ciclos):")
                    local_logger.log_sistema(f"   üìà PIB Esperado: ${predicciones['pib_esperado']:,.0f}")
                    local_logger.log_sistema(f"   üíπ Tendencia Precios: {predicciones['tendencia_precios']}")
                    local_logger.log_sistema(f"   ÔøΩ Nuevas Empresas IA: {predicciones['nuevas_empresas_ia']}")
                    local_logger.log_sistema(f"   ‚ö° Oportunidades Detectadas: {predicciones['oportunidades_detectadas']}")
                
                # === OPTIMIZACI√ìN AUTOM√ÅTICA DEL SISTEMA ===
                # El sistema se auto-optimiza bas√°ndose en m√©tricas de rendimiento
                if ciclo % 15 == 0:
                    optimizaciones = mercado.sistema_ia._auto_optimizar_parametros(ciclo)
                    if optimizaciones['cambios_realizados'] > 0:
                        local_logger.log_sistema(f"‚ö° AUTO-OPTIMIZACI√ìN IA:")
                        local_logger.log_sistema(f"   üîß Par√°metros ajustados: {optimizaciones['cambios_realizados']}")
                        local_logger.log_sistema(f"   üìä Mejora rendimiento: +{optimizaciones['mejora_rendimiento']:.1%}")
                
            except Exception as e:
                local_logger.log_error(f"   ‚ùå Error en IA avanzada (ciclo {ciclo}): {e}")
                # Sistema de recuperaci√≥n autom√°tica
                try:
                    mercado.sistema_ia._recuperacion_automatica(e, ciclo)
                    local_logger.log_sistema(f"   üîÑ Recuperaci√≥n autom√°tica IA activada")
                except:
                    local_logger.log_error(f"   ‚ö†Ô∏è Sistema IA en modo degradado")
        
        # 4. RESCATE EMPRESARIAL - Evaluar y rescatar empresas en crisis
        if hasattr(mercado, 'gestor_rescate'):
            mercado.gestor_rescate.evaluar_y_rescatar_empresas(ciclo)
            mercado.gestor_rescate.procesar_liquidaciones_programadas(ciclo)
            
            # Log estad√≠sticas cada 10 ciclos
            if ciclo % 10 == 0:
                stats_rescate = mercado.gestor_rescate.obtener_estadisticas_rescate()
                local_logger.log_sistema(f"üöë Rescate Empresarial - Ciclo {ciclo}: "
                                       f"Rescates={stats_rescate['rescates_totales']}, "
                                       f"Fusiones={stats_rescate['fusiones_totales']}, "
                                       f"Liquidaciones={stats_rescate['liquidaciones_totales']}")

        # 5. SISTEMA FISCAL AVANZADO - Recaudaci√≥n, gasto y pol√≠tica fiscal
        if hasattr(mercado, 'sistema_fiscal'):
            reporte_fiscal = mercado.sistema_fiscal.ejecutar_ciclo_fiscal(ciclo)
            
            # Log fiscal cada 5 ciclos
            if ciclo % 5 == 0:
                local_logger.log_sistema(f"üí∞ Sistema Fiscal - Ciclo {ciclo}: "
                                       f"Recaudaci√≥n=${reporte_fiscal['recaudacion_total']:,.0f}, "
                                       f"Gasto=${reporte_fiscal['gasto_publico']:,.0f}, "
                                       f"Pol√≠tica={reporte_fiscal['politica_fiscal']}")
                local_logger.log_sistema(f"   D√©ficit/PIB: {reporte_fiscal['deficit_pib_ratio']:.1%}, "
                                       f"Deuda/PIB: {reporte_fiscal['deuda_pib_ratio']:.1%}")

        # 6. MERCADO DE CAPITALES - Trading y burbujas burs√°tiles
        if hasattr(mercado, 'bolsa_valores'):
            reporte_bursatil = mercado.bolsa_valores.ejecutar_ciclo_bursatil(ciclo)
            
            # Log burs√°til cada 5 ciclos
            if ciclo % 5 == 0:
                local_logger.log_sistema(f"üìà Bolsa de Valores - Ciclo {ciclo}: "
                                       f"Sentimiento={reporte_bursatil['sentimiento_mercado']:.2f}, "
                                       f"Volumen={reporte_bursatil['volumen_total']:,}, "
                                       f"√çndice General={reporte_bursatil['indices'].get('GENERAL', 0):.1f}")
                if reporte_bursatil['en_burbuja']:
                    local_logger.log_sistema(f"   üéà BURBUJA BURS√ÅTIL ACTIVA")

        # 6. SISTEMA DE CLASES SOCIALES - Movilidad social
        if hasattr(mercado, 'sistema_clases'):
            reporte_social = mercado.sistema_clases.ejecutar_ciclo_movilidad_social(ciclo)
            
            # Log social cada 12 ciclos (anual)
            if reporte_social:  # Solo si hubo evaluaci√≥n de movilidad
                local_logger.log_sistema(f"üë• Clases Sociales - Ciclo {ciclo}: "
                                       f"Movilidad={reporte_social['movimientos_totales']}, "
                                       f"Ascensos={reporte_social['movilidad_ascendente']}, "
                                       f"Descensos={reporte_social['movilidad_descendente']}")
                local_logger.log_sistema(f"   Gini={reporte_social['coeficiente_gini']:.3f}, "
                                       f"Ratio 90/10={reporte_social['ratio_90_10']:.1f}")

        # === SISTEMAS EXISTENTES ===

        # 1. Verificar y gestionar crisis financiera (una sola vez por ciclo)
        if mercado.crisis_financiera_activa:
            local_logger.log_crisis(
                f"Ciclo {ciclo}: Crisis financiera activa - ciclos en crisis: {getattr(mercado, 'ciclos_en_crisis', 0)}")
            if evaluar_recuperacion_crisis(mercado):
                local_logger.log_crisis(
                    f"Ciclo {ciclo}: Crisis financiera resuelta - Econom√≠a recuper√°ndose")
                local_logger.log_crisis(
                    f"Ciclo {ciclo}: Crisis financiera RESUELTA - Econom√≠a recuper√°ndose")
                mercado.crisis_financiera_activa = False
                mercado.ciclos_en_crisis = 0
            else:
                # Solo aplicar medidas cada 3 ciclos para evitar spam
                if getattr(mercado, 'ciclos_en_crisis', 0) % 3 == 0:
                    local_logger.log_crisis(
                        f"Ciclo {ciclo}: Aplicando medidas de recuperaci√≥n de crisis")
                    aplicar_medidas_recuperacion(mercado)
                mercado.ciclos_en_crisis = getattr(
                    mercado, 'ciclos_en_crisis', 0) + 1
        else:
            # Evaluar si iniciar nueva crisis
            riesgo = evaluar_riesgo_sistemico(mercado.sistema_bancario) if hasattr(
                mercado, 'sistema_bancario') else 0
            if riesgo > 0.7:  # Umbral m√°s alto para evitar crisis constantes
                mercado.crisis_financiera_activa = True
                mercado.ciclos_en_crisis = 0
                local_logger.log_crisis(
                    f"Ciclo {ciclo}: Crisis financiera detectada (riesgo: {riesgo:.2f})")
                local_logger.log_crisis(
                    f"Ciclo {ciclo}: Crisis financiera DETECTADA (riesgo: {riesgo:.2f})")
            elif riesgo > 0.4:  # Log niveles de riesgo elevados
                local_logger.log_crisis(
                    f"Ciclo {ciclo}: Riesgo sist√©mico elevado: {riesgo:.2f}")

        # 2. Detectar estancamiento econ√≥mico (solo si no hay crisis activa)
        if not mercado.crisis_financiera_activa and detectar_estancamiento_economico(mercado):
            local_logger.log_sistema(
                f"Ciclo {ciclo}: Estancamiento econ√≥mico detectado - aplicando est√≠mulo de emergencia")
            aplicar_estimulo_emergencia(mercado)

        # 3. Mercado laboral - contrataciones masivas si es necesario
        if hasattr(mercado, 'mercado_laboral'):
            mercado.mercado_laboral.facilitar_contrataciones_masivas()
            # Log que se ejecut√≥ la funci√≥n (no devuelve un valor espec√≠fico)
            local_logger.log_sistema(
                f"Ciclo {ciclo}: Proceso de contrataciones masivas ejecutado")

        # 3.1. Enhanced Labor Market - DMP-style matching and wage formation
        if hasattr(mercado, 'enhanced_labor_market'):
            labor_stats = mercado.enhanced_labor_market.labor_market_cycle()
            local_logger.log_sistema(
                f"Ciclo {ciclo}: Enhanced Labor Market - "
                f"Desempleo: {labor_stats['unemployment_rate']:.1%}, "
                f"Salario promedio: ${labor_stats['average_wage']:,.0f}, "
                f"Vacantes: {labor_stats['total_vacancies']}, "
                f"Emparejamientos: {labor_stats['matches_made']}")

        # 4. Analytics ML cada 5 ciclos
        if hasattr(mercado, 'analytics_ml') and ciclo % 5 == 0:
            local_logger.log_ml(
                f"Ciclo {ciclo}: Ejecutando ciclo de Analytics ML")
            mercado.analytics_ml.ciclo_analytics()

        # 5. Actualizar precios din√°micos cada 3 ciclos + Control realista
        if ciclo % 3 == 0:
            local_logger.log_precios(
                f"Ciclo {ciclo}: Actualizando precios din√°micos del mercado")
            actualizar_precios_mercado(mercado)
            
            # SISTEMA HIPERREALISTA: Control de precios realista (aplicar DESPU√âS de precios din√°micos)
            if hasattr(mercado, 'controlador_precios'):
                # NUEVO: Monitorear y responder a hiperinflaci√≥n ANTES del control normal
                emergencia_activada = mercado.controlador_precios.monitorear_y_responder_hiperinflacion(ciclo)
                
                cambios_aplicados = mercado.controlador_precios.aplicar_control_masivo_precios(ciclo)
                if cambios_aplicados > 0:
                    local_logger.log_precios(
                        f"üí∞ Control Precios - Ciclo {ciclo}: {cambios_aplicados} precios controlados por inercia")
                    
                # Log de emergencia si est√° activa
                if emergencia_activada:
                    local_logger.log_sistema(f"üö® CONTROLES DE EMERGENCIA ANTI-HIPERINFLACI√ìN ACTIVADOS - Ciclo {ciclo}")
                    
                # Log estad√≠sticas cada 15 ciclos
                if ciclo % 15 == 0:
                    stats_precios = mercado.controlador_precios.obtener_estadisticas_control()
                    local_logger.log_precios(f"üí∞ Control Precios - Estad√≠sticas: "
                                            f"Cambios aplicados={stats_precios['cambios_aplicados']}, "
                                            f"Precio promedio=${stats_precios['precio_promedio_actual']:.2f}")

        # === CICLO ECON√ìMICO PRINCIPAL ===
        local_logger.log_ciclo(
            f"Ciclo {ciclo}: Ejecutando ciclo econ√≥mico principal")
        mercado.ejecutar_ciclo(ciclo)

        # === NUEVO: VALIDACI√ìN ECON√ìMICA POST-CICLO ===
        if hasattr(mercado, 'validador_economico'):
            alertas = mercado.validador_economico.validar_indicadores_macroeconomicos(mercado, ciclo)
            alertas_precios = mercado.validador_economico.detectar_anomalias_precios(mercado, ciclo)
            
            # Log alertas cr√≠ticas inmediatamente
            alertas_criticas = [a for a in alertas + alertas_precios if a.tipo.value == "CRITICA"]
            if alertas_criticas:
                for alerta in alertas_criticas:
                    local_logger.log_error(f"üö® ALERTA CR√çTICA: {alerta.mensaje}")
            
            # Log reporte de validaci√≥n cada 10 ciclos
            if ciclo % 10 == 0:
                # Usar reporte avanzado si hay modelos disponibles
                if MODELOS_ECONOMICOS_DISPONIBLES and hasattr(mercado, 'validador_economico'):
                    reporte_validacion = mercado.validador_economico.generar_reporte_avanzado(mercado, ciclo)
                    local_logger.log_sistema("üìä REPORTE AVANZADO DE VALIDACI√ìN ECON√ìMICA:")
                else:
                    reporte_validacion = mercado.validador_economico.generar_reporte_validacion(mercado, ciclo)
                    local_logger.log_sistema("üìä REPORTE DE VALIDACI√ìN ECON√ìMICA:")
                
                for linea in reporte_validacion.split('\n'):
                    if linea.strip():
                        local_logger.log_sistema(f"   {linea}")
                
                # An√°lisis con modelos econ√≥micos avanzados cada 15 ciclos
                if MODELOS_ECONOMICOS_DISPONIBLES and hasattr(mercado, 'integrador_modelos') and ciclo % 15 == 0:
                    try:
                        # Obtener todas las empresas
                        todas_empresas = []
                        if hasattr(mercado, 'empresas_productoras'):
                            todas_empresas.extend(mercado.empresas_productoras)
                        if hasattr(mercado, 'empresas_comerciales'):
                            todas_empresas.extend(mercado.empresas_comerciales)
                        
                        estado_economico = {
                            'inflacion': getattr(mercado, 'inflacion_anual', 0.02),
                            'desempleo': getattr(mercado, 'tasa_desempleo', 0.05),
                            'crecimiento_pib': getattr(mercado, 'crecimiento_pib', 0.02),
                            'productividad': getattr(mercado, 'productividad_promedio', 1.0),
                            'pib': getattr(mercado, 'pib_total', 1000000),
                            'capital': sum(getattr(emp, 'capital', 0) for emp in todas_empresas),
                            'trabajo': len([c for c in mercado.consumidores if getattr(c, 'empleado', False)])
                        }
                        
                        analisis_completo = mercado.integrador_modelos.analisis_completo(estado_economico)
                        
                        local_logger.log_sistema("üßÆ AN√ÅLISIS MODELOS ECON√ìMICOS AVANZADOS:")
                        if 'sintesis' in analisis_completo:
                            sintesis = analisis_completo['sintesis']
                            local_logger.log_sistema(f"   üìà PIB Consenso: {sintesis.get('pib_consenso', 'N/A')}")
                            local_logger.log_sistema(f"   üí∞ Tasa Consenso: {sintesis.get('tasa_consenso', 'N/A'):.3f}%")
                            local_logger.log_sistema(f"   üéØ Consistencia: {sintesis.get('consistencia_modelos', 0):.1%}")
                        
                        # Detectar r√©gimen econ√≥mico
                        if hasattr(mercado, 'calibrador_economico'):
                            regimen = mercado.calibrador_economico.detectar_regimen_economico(estado_economico)
                            local_logger.log_sistema(f"   üìä R√©gimen Econ√≥mico: {regimen}")
                            
                    except Exception as e:
                        local_logger.log_sistema(f"   ‚ö†Ô∏è  Error en an√°lisis avanzado: {e}")

        # === NUEVO: POL√çTICA MONETARIA AVANZADA ===
        if hasattr(mercado, 'banco_central_avanzado'):
            decision_monetaria = mercado.banco_central_avanzado.ejecutar_politica_monetaria(ciclo)
            if decision_monetaria:
                local_logger.log_sistema(f"üè¶ POL√çTICA MONETARIA: {decision_monetaria.justificacion}")
                if abs(decision_monetaria.tasa_nueva - decision_monetaria.tasa_anterior) > 0.002:
                    comunicado = mercado.banco_central_avanzado.generar_comunicado_monetario(decision_monetaria)
                    local_logger.log_sistema("üì¢ COMUNICADO BANCO CENTRAL:")
                    for linea in comunicado.split('\n'):
                        if linea.strip() and not linea.startswith('='):
                            local_logger.log_sistema(f"   {linea}")

        # Actualizar dashboard despu√©s del ciclo (cuando ya se calcul√≥ PIB)
        mercado.dashboard.actualizar_metricas(ciclo)

        # Log m√©tricas b√°sicas del ciclo
        pib_actual = mercado.pib_historico[-1] if mercado.pib_historico else 0
        inflacion_actual = mercado.inflacion_historica[-1] if mercado.inflacion_historica else 0
        local_logger.log_metricas(
            f"Ciclo {ciclo}: PIB=${pib_actual:,.2f}, Inflaci√≥n={inflacion_actual*100:.2f}%")

        # === REPORTES PERI√ìDICOS ===
        if ciclo % frecuencia_reportes == 0 or ciclo == num_ciclos:
            local_logger.log_sistema(
                f"Generando reporte peri√≥dico para ciclo {ciclo}")
            # Calcular m√©tricas actuales
            consumidores_totales = len(mercado.getConsumidores())
            desempleados = len(
                [c for c in mercado.getConsumidores() if not c.empleado])
            tasa_desempleo = (
                desempleados / max(1, consumidores_totales)) * 100

            # Enhanced Labor Market metrics
            enhanced_metrics = {}
            if hasattr(mercado, 'enhanced_labor_market'):
                enhanced_metrics = mercado.enhanced_labor_market.metrics
                # Use enhanced metrics if available
                tasa_desempleo = enhanced_metrics.get('unemployment_rate', tasa_desempleo / 100) * 100

            pib_actual = mercado.pib_historico[-1] if mercado.pib_historico else 0
            inflacion_actual = mercado.inflacion_historica[-1] if mercado.inflacion_historica else 0

            transacciones_ciclo = len(
                [t for t in mercado.transacciones if t.get('ciclo', 0) == ciclo])
            empresas_activas = len(
                [e for e in mercado.getEmpresas() if hasattr(e, 'dinero') and e.dinero > 0])

            # M√©tricas ML
            modelos_entrenados = 0
            if hasattr(mercado, 'analytics_ml'):
                stats_ml = mercado.analytics_ml.obtener_estadisticas_analytics()
                modelos_entrenados = stats_ml.get('modelos_entrenados', 0)

            # M√©tricas bancarias
            depositos_totales = prestamos_totales = 0
            if hasattr(mercado, 'sistema_bancario') and mercado.sistema_bancario.bancos:
                for banco in mercado.sistema_bancario.bancos:
                    depositos_totales += sum(banco.depositos.values())
                    prestamos_totales += sum([p['monto']
                                             for p in banco.prestamos.values()])

            # === M√âTRICAS HIPERREALISTAS v3.0 ===
            # Banco Central
            tasa_bc = 0.0
            politica_bc = "N/A"
            if hasattr(mercado, 'banco_central'):
                tasa_bc = mercado.banco_central.tasa_interes_base
                politica_bc = mercado.banco_central.historial_decisiones[-1]['decision'] if mercado.banco_central.historial_decisiones else "Inicial"
            
            # Ciclo Econ√≥mico
            fase_economica = "N/A"
            if hasattr(mercado, 'gestor_ciclo'):
                fase_economica = mercado.gestor_ciclo.fase_actual.value
            
            # Rescate Empresarial
            empresas_rescatadas = fusiones = liquidaciones = 0
            if hasattr(mercado, 'gestor_rescate'):
                stats_rescate = mercado.gestor_rescate.obtener_estadisticas_rescate()
                empresas_rescatadas = stats_rescate['rescates_totales']
                fusiones = stats_rescate['fusiones_totales']
                liquidaciones = stats_rescate['liquidaciones_totales']

            local_logger.log_reporte(f"""
REPORTE HIPERREALISTA v3.0 - CICLO {ciclo}/{num_ciclos}:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìä M√âTRICAS PRINCIPALES:
   PIB: ${pib_actual:,.2f} | Inflaci√≥n: {inflacion_actual*100:.2f}%
   Desempleo: {tasa_desempleo:.1f}% | Empresas Activas: {empresas_activas}
   Transacciones: {transacciones_ciclo} | Modelos ML: {modelos_entrenados}

üè¶ SISTEMA BANCARIO:
   Dep√≥sitos: ${depositos_totales:,.0f} | Pr√©stamos: ${prestamos_totales:,.0f}
   Tasa Banco Central: {tasa_bc:.2%} | Pol√≠tica: {politica_bc}

üöÄ SISTEMAS HIPERREALISTAS:
   Fase Econ√≥mica: {fase_economica}
   Rescates: {empresas_rescatadas} | Fusiones: {fusiones} | Liquidaciones: {liquidaciones}
   Crisis: {'üî¥ Activa' if mercado.crisis_financiera_activa else 'üü¢ Inactiva'}

üëî MERCADO LABORAL MEJORADO:
   Salario Promedio: ${enhanced_metrics.get('average_wage', 0):,.0f}
   Vacantes Activas: {enhanced_metrics.get('total_vacancies', 0)}
   Tasa de Emparejamiento: {enhanced_metrics.get('match_rate', 0):.1%}
   Crecimiento Salarial: {enhanced_metrics.get('wage_growth', 0):+.1%}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê""")

            # Log reporte detallado (mantener formato original para compatibilidad)
            local_logger.log_reporte(
                f"REPORTE CICLO {ciclo}: PIB=${pib_actual:,.2f}, Inflaci√≥n={inflacion_actual*100:.2f}%, Desempleo={tasa_desempleo:.1f}%, Empresas={empresas_activas}, Transacciones={transacciones_ciclo}")
            local_logger.log_reporte(
                f"REPORTE CICLO {ciclo}: Dep√≥sitos=${depositos_totales:,.0f}, Pr√©stamos=${prestamos_totales:,.0f}, Crisis={'Activa' if mercado.crisis_financiera_activa else 'Inactiva'}")
            local_logger.log_reporte(
                f"REPORTE HIPERREALISTA CICLO {ciclo}: TasaBC={tasa_bc:.2f}%, Fase={fase_economica}, Rescates={empresas_rescatadas}, Fusiones={fusiones}, Liquidaciones={liquidaciones}")

        # Actualizar gr√°fico en tiempo real
        if usar_tiempo_real and ciclo % 2 == 0:
            visualizador_tiempo_real.actualizar_grafico_tiempo_real(
                mercado.dashboard)

    # === FINALIZACI√ìN ===
    tiempo_total = time.time() - tiempo_inicio
    local_logger.log_sistema(
        f"Simulaci√≥n completada - Tiempo total: {tiempo_total:.2f} segundos")
    local_logger.log_metricas(
        f"Velocidad promedio: {tiempo_total/num_ciclos:.3f} segundos/ciclo")

    if usar_tiempo_real:
        visualizador_tiempo_real.cerrar()

    logger.log_fin("=" * 60)
    logger.log_fin("SIMULACI√ìN COMPLETADA")
    logger.log_fin("=" * 60)
    logger.log_fin(f"Tiempo total: {tiempo_total:.2f} segundos")
    logger.log_fin(f"Velocidad: {tiempo_total/num_ciclos:.3f} segundos/ciclo")

    # === FINALIZACI√ìN DEL SISTEMA DE IA ===
    if hasattr(mercado, 'sistema_ia') and mercado.sistema_ia is not None:
        try:
            local_logger.log_sistema("ü§ñ Finalizando Sistema de Agentes IA...")
            mercado.sistema_ia.finalizar()
            local_logger.log_sistema("   ‚úÖ Sistema IA finalizado correctamente")
        except Exception as e:
            local_logger.log_error(f"   ‚ùå Error finalizando sistema IA: {e}")

    # === RESULTADOS FINALES ===
    local_logger.log_sistema("Generando resultados finales de la simulaci√≥n")
    generar_resultados_finales(mercado, tiempo_total, num_ciclos, prefijo_resultados=prefijo_resultados)

    # Log final de cierre
    local_logger.log_fin(
        "Simulaci√≥n Econ√≥mica Avanzada v3.0 completada exitosamente")

    return mercado


def generar_resultados_finales(mercado, tiempo_total, num_ciclos, prefijo_resultados: str | None = None):
    """Genera y guarda todos los resultados finales"""
    logger.log_sistema("GENERANDO RESULTADOS FINALES...")

    # === DASHBOARD COMPLETO ===
    mercado.dashboard.crear_dashboard_completo(
        num_ciclos, guardar_archivo=True, prefijo=prefijo_resultados)

    # === REPORTE TEXTUAL ===
    logger.log_reporte("Reporte textual generado:")
    logger.log_reporte(mercado.dashboard.generar_reporte_textual())

    # === EXPORTAR DATOS ===
    prefijo = prefijo_resultados or "simulacion_v2_1"
    csv_file, json_file, reporte_file = exportar_resultados_completos(
        mercado.dashboard, prefijo=prefijo
    )

    # === ESTAD√çSTICAS ADICIONALES ===
    logger.log_sistema("ESTAD√çSTICAS T√âCNICAS v3.0:")
    logger.log_sistema(f"   Tiempo total: {tiempo_total:.2f}s")
    logger.log_sistema(
        f"   Velocidad promedio: {tiempo_total/num_ciclos:.3f}s/ciclo")
    logger.log_sistema(f"   Agentes totales: {len(mercado.personas)}")
    logger.log_sistema(f"   Tipos de bienes: {len(mercado.bienes)}")
    logger.log_sistema(
        f"   Transacciones totales: {len(mercado.transacciones)}")

    # === ESTAD√çSTICAS HIPERREALISTAS ===
    logger.log_sistema("ESTAD√çSTICAS HIPERREALISTAS:")
    
    # Banco Central
    if hasattr(mercado, 'banco_central'):
        decisiones_bc = len(mercado.banco_central.historial_decisiones)
        tasa_final = mercado.banco_central.tasa_interes_base
        logger.log_sistema(f"   üè¶ Banco Central - Decisiones: {decisiones_bc}, Tasa final: {tasa_final:.2%}")
    
    # Ciclo Econ√≥mico
    if hasattr(mercado, 'gestor_ciclo'):
        transiciones = mercado.gestor_ciclo.contador_transiciones
        fase_final = mercado.gestor_ciclo.fase_actual.value
        logger.log_sistema(f"   üìä Ciclo Econ√≥mico - Transiciones: {transiciones}, Fase final: {fase_final}")
    
    # Rescate Empresarial
    if hasattr(mercado, 'gestor_rescate'):
        stats_rescate = mercado.gestor_rescate.obtener_estadisticas_rescate()
        logger.log_sistema(f"   üöë Rescate Empresarial - Rescates: {stats_rescate['rescates_totales']}, "
                          f"Fusiones: {stats_rescate['fusiones_totales']}, Liquidaciones: {stats_rescate['liquidaciones_totales']}")
    
    # NUEVO: Sistema Fiscal
    if hasattr(mercado, 'sistema_fiscal'):
        stats_fiscal = mercado.sistema_fiscal.obtener_estadisticas_fiscales()
        logger.log_sistema(f"   üí∞ Sistema Fiscal - Recaudaci√≥n: ${stats_fiscal['recaudacion_total']:,.0f}")
        logger.log_sistema(f"      Presi√≥n Fiscal/PIB: {stats_fiscal['presion_fiscal_pib']:.1%}")
        logger.log_sistema(f"      D√©ficit Fiscal: ${stats_fiscal['deficit_fiscal']:,.0f}")
        logger.log_sistema(f"      Deuda/PIB: {stats_fiscal['deuda_publica']/(mercado.pib_historico[-1] if mercado.pib_historico else 1):.1%}")
        logger.log_sistema(f"      Pol√≠tica Actual: {stats_fiscal['politica_actual']}")
    
    # NUEVO: Mercado de Capitales
    if hasattr(mercado, 'bolsa_valores'):
        stats_bolsa = mercado.bolsa_valores.obtener_estadisticas_mercado()
        logger.log_sistema(f"   üìà Bolsa de Valores - Acciones: {stats_bolsa['acciones_listadas']}")
        logger.log_sistema(f"      Cap. Total: ${stats_bolsa['capitalizacion_total']:,.0f}")
        logger.log_sistema(f"      Rendimiento Promedio: {stats_bolsa['rendimiento_promedio']:.1%}")
        logger.log_sistema(f"      Sentimiento: {stats_bolsa['sentimiento_mercado']:.2f}")
        logger.log_sistema(f"      Burbuja Activa: {'S√≠' if stats_bolsa['en_burbuja'] else 'No'}")
    
    # NUEVO: Sistema de Clases Sociales
    if hasattr(mercado, 'sistema_clases'):
        stats_social = mercado.sistema_clases.obtener_estadisticas_sociales()
        logger.log_sistema(f"   üë• Clases Sociales - Coef. Gini: {stats_social['coeficiente_gini']:.3f}")
        logger.log_sistema(f"      Ratio 90/10: {stats_social['ratio_90_10']:.1f}")
        logger.log_sistema(f"      Movilidad Total: {stats_social['movimientos_historicos_total']}")
        logger.log_sistema(f"      Tasa Ascenso: {stats_social['tasa_ascenso_historica']:.1%}")
        
        # Distribuci√≥n por clase
        distribucion = stats_social['distribucion_clases']
        total_consumidores = sum(distribucion.values())
        if total_consumidores > 0:
            logger.log_sistema(f"      Distribuci√≥n: Alta {distribucion.get('alta', 0)/total_consumidores:.0%}, "
                              f"Media-Alta {distribucion.get('media_alta', 0)/total_consumidores:.0%}, "
                              f"Media {distribucion.get('media', 0)/total_consumidores:.0%}, "
                              f"Baja {distribucion.get('baja', 0)/total_consumidores:.0%}")
    
    # Control de Precios
    if hasattr(mercado, 'controlador_precios'):
        stats_precios = mercado.controlador_precios.obtener_estadisticas_control()
        logger.log_sistema(f"   üí∞ Control Precios - Cambios aplicados: {stats_precios['cambios_aplicados']}, "
                          f"Precio promedio: ${stats_precios['precio_promedio_actual']:.2f}")

    # Estad√≠sticas existentes
    if hasattr(mercado, 'sistema_precios'):
        stats_precios = mercado.sistema_precios.obtener_estadisticas_precios()
        if stats_precios:
            logger.log_sistema(
                f"   Precio promedio: ${stats_precios['precio_promedio']:.2f}")
            logger.log_sistema(
                f"   Dispersi√≥n precios: ${stats_precios['dispersion_precios']:.2f}")

    logger.log_sistema("Archivos generados:")
    logger.log_sistema(f"   Datos CSV: {csv_file}")
    logger.log_sistema(f"   Configuraci√≥n JSON: {json_file}")
    logger.log_sistema(f"   Reporte: {reporte_file}")

    # --- Persistencia ML: guardar modelos y registrar experimento ---
    try:
        if hasattr(mercado, 'analytics_ml'):
            resumen = mercado.analytics_ml.guardar_modelos('results/ml_models')
            run_path = mercado.analytics_ml.registrar_experimento(
                nombre='simulacion_completa',
                detalles={
                    'tiempo_total': tiempo_total,
                    'num_ciclos': num_ciclos,
                    'pib_final': mercado.pib_historico[-1] if mercado.pib_historico else 0.0
                },
                base_dir='results/ml_runs'
            )
            logger.log_sistema(f"Modelos ML guardados: {resumen.get('modelos_guardados', 0)} en results/ml_models/")
            logger.log_sistema(f"Experimento registrado: {run_path}")
    except Exception as e:
        logger.log_sistema(f"Advertencia: No se pudo guardar modelos ML: {e}")


def main():
    """Funci√≥n principal mejorada v3.0"""
    logger.log_inicio("SIMULADOR ECON√ìMICO HIPERREALISTA v3.0")
    logger.log_inicio("==========================================")
    logger.log_inicio("‚úÖ Sistema ML con garant√≠a de entrenamiento")
    logger.log_inicio("‚úÖ Precios din√°micos implementados")
    logger.log_inicio("‚úÖ Dashboard avanzado con m√∫ltiples m√©tricas")
    logger.log_inicio("‚úÖ Configuraci√≥n externa JSON")
    logger.log_inicio("‚úÖ Crisis financiera mejorada")
    logger.log_inicio("‚úÖ Mercado laboral activado")
    logger.log_inicio("‚úÖ Sistema bancario completamente funcional")
    logger.log_inicio("‚úÖ Sistema de logging avanzado implementado")
    logger.log_inicio("üöÄ NUEVO: Banco Central con pol√≠tica monetaria")
    logger.log_inicio("üöÄ NUEVO: Control de precios realista")  
    logger.log_inicio("üöÄ NUEVO: Ciclos econ√≥micos genuinos")
    logger.log_inicio("üöÄ NUEVO: Sistema de rescate empresarial")
    logger.log_inicio("ü§ñ NUEVO v3.0: SISTEMA DE AGENTES IA HIPERREALISTAS")
    logger.log_inicio("=" * 70)

    try:
        # CLI: argumentos de escenario y semilla
        parser = argparse.ArgumentParser(description="Simulador de Mercado Hiperrealista v3.0")
        parser.add_argument("--escenario", type=str, default=None, help="Ruta a archivo JSON de escenario o nombre en carpeta 'escenarios/'")
        parser.add_argument("--seed", type=int, default=None, help="Semilla para aleatoriedad")
        args, unknown = parser.parse_known_args()

        # Semilla determinista opcional (CLI tiene prioridad)
        cli_seed = args.seed

        # Cargar configuraci√≥n
        logger.log_configuracion("Cargando configuraci√≥n...")
        logger.log_inicio("Cargando configuraci√≥n del simulador")
        configurador = ConfiguradorSimulacion()
        # Aplicar seed global desde config o CLI
        configurador.aplicar_seed_global(cli_seed)

        # Si se especifica un escenario, intentar cargarlo
        escenario_nombre = None
        if args.escenario:
            def _deep_merge(base, overlay):
                if not isinstance(base, dict) or not isinstance(overlay, dict):
                    return overlay
                result = dict(base)
                for k, v in overlay.items():
                    if k in result and isinstance(result[k], dict) and isinstance(v, dict):
                        result[k] = _deep_merge(result[k], v)
                    else:
                        result[k] = v
                return result
            ruta = args.escenario
            if not os.path.isabs(ruta) and not os.path.exists(ruta):
                ruta = os.path.join(os.path.dirname(__file__), "escenarios", args.escenario if args.escenario.endswith('.json') else f"{args.escenario}.json")
            if os.path.exists(ruta):
                try:
                    with open(ruta, 'r', encoding='utf-8') as f:
                        escenario_cfg = json.load(f)
                    # Merge profundo sobre config base ya cargada
                    configurador.config = _deep_merge(configurador.config, escenario_cfg)
                    escenario_nombre = os.path.splitext(os.path.basename(ruta))[0]
                    logger.log_configuracion(f"‚úÖ Escenario cargado: {ruta}")
                except Exception as e:
                    logger.log_configuracion(f"‚ö†Ô∏è  No se pudo cargar el escenario '{ruta}': {e}. Se usar√° configuraci√≥n por defecto.")
            else:
                logger.log_configuracion(f"‚ö†Ô∏è  Escenario no encontrado: {ruta}. Se usar√° configuraci√≥n por defecto.")

        # Ejecutar simulaci√≥n
        logger.log_inicio("Iniciando ejecuci√≥n de simulaci√≥n hiperrealista")
        prefijo_resultados = None
        if escenario_nombre:
            prefijo_resultados = f"esc_{escenario_nombre}"
            if args.seed is not None:
                prefijo_resultados += f"_seed{args.seed}"

        mercado = ejecutar_simulacion_completa(configurador, prefijo_resultados=prefijo_resultados)

        logger.log_fin(
            "Simulaci√≥n exitosa - SISTEMA DE AGENTES IA IMPLEMENTADO correctamente")
        logger.log_fin(
            "üéØ SIMULACI√ìN ECON√ìMICA HIPERREALISTA v3.0 COMPLETADA EXITOSAMENTE")

    except KeyboardInterrupt:
        logger.log_error(
            "Simulaci√≥n interrumpida por el usuario (KeyboardInterrupt)")
    except Exception as e:
        logger.log_error(f"Error durante la simulaci√≥n: {e}")
        import traceback
        logger.log_error(f"Traceback completo: {traceback.format_exc()}")
        # Mantenemos el traceback para debug si es necesario
        traceback.print_exc()


if __name__ == "__main__":
    main()
