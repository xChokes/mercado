"""
Banco Central Avanzado con Pol√≠tica Monetaria Profesional
========================================================

Implementa la regla de Taylor y otros instrumentos de pol√≠tica monetaria
para mantener estabilidad de precios y pleno empleo.
Integra modelos econ√≥micos avanzados para pron√≥sticos.
"""

import math
import logging
import sys
import os
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# Agregar path para importar m√≥dulos avanzados
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

try:
    from src.systems.ModelosEconomicosAvanzados import (
        IntegradorModelosEconomicos, ParametrosEconomicos
    )
    from src.config.DatosEconomicosReales import CalibradorEconomicoRealista
    MODELOS_DISPONIBLES = True
except ImportError:
    IntegradorModelosEconomicos = None
    ParametrosEconomicos = None
    CalibradorEconomicoRealista = None
    MODELOS_DISPONIBLES = False


class EstadoEconomico(Enum):
    """Estados de la econom√≠a para pol√≠tica monetaria"""
    EXPANSION = "expansion"
    RECESION = "recesion"
    ESTANFLACION = "estanflacion"
    RECUPERACION = "recuperacion"
    CRISIS = "crisis"
    SOBRECALENTAMIENTO = "sobrecalentamiento"


@dataclass
class DecisionMonetaria:
    """Registro de una decisi√≥n de pol√≠tica monetaria"""
    ciclo: int
    tasa_anterior: float
    tasa_nueva: float
    inflacion_objetivo: float
    inflacion_actual: float
    brecha_producto: float
    justificacion: str


class BancoCentralAvanzado:
    """
    Banco Central con pol√≠tica monetaria sofisticada basada en:
    - Regla de Taylor aumentada
    - Modelos DSGE y IS-LM para pron√≥sticos
    - Targeting de inflaci√≥n con expectativas
    - Comunicaci√≥n forward guidance profesional
    """
    
    def __init__(self, mercado):
        self.mercado = mercado
        self.logger = logging.getLogger('BancoCentral')
        
        # Par√°metros de pol√≠tica monetaria
        self.tasa_neutral = 0.025       # Tasa de inter√©s neutral (2.5%)
        self.inflacion_objetivo = 0.025  # Meta de inflaci√≥n (2.5%)
        self.tolerancia_inflacion = 0.005  # Banda de tolerancia (¬±0.5%)
        
        # Par√°metros de la regla de Taylor
        self.peso_inflacion = 1.2       # Reacci√≥n a desviaci√≥n de inflaci√≥n (m√°s conservador)
        self.peso_producto = 0.3        # Reacci√≥n a brecha del producto (m√°s conservador)
        self.suavizamiento = 0.85       # Mayor suavizamiento de tasas
        
        # Estado del banco central
        self.tasa_actual = self.tasa_neutral
        self.decisiones_historicas = []
        self.forward_guidance = ""
        self.reunion_cada_ciclos = 3    # Reuniones cada 3 ciclos
        
        # Estimaciones econ√≥micas
        self.pib_potencial_estimado = None
        self.tendencia_inflacion = []
        
        # Modelos econ√≥micos avanzados
        if MODELOS_DISPONIBLES:
            self.integrador_modelos = IntegradorModelosEconomicos()
            self.calibrador = CalibradorEconomicoRealista()
            self.usar_modelos_avanzados = True
            self.logger.info("üßÆ Modelos econ√≥micos avanzados ACTIVADOS")
        else:
            self.integrador_modelos = None
            self.calibrador = None
            self.usar_modelos_avanzados = False
            self.logger.warning("‚ö†Ô∏è  Modelos econ√≥micos avanzados NO DISPONIBLES")
        
        # An√°lisis de expectativas
        self.expectativas_inflacion = self.inflacion_objetivo
        self.confianza_expectativas = 0.8
        
    def ejecutar_politica_monetaria(self, ciclo: int) -> Optional[DecisionMonetaria]:
        """
        Ejecuta la pol√≠tica monetaria si corresponde una reuni√≥n
        """
        if ciclo % self.reunion_cada_ciclos != 0:
            return None
            
        # Actualizar estimaciones
        self._actualizar_estimaciones()
        
        # Evaluar estado econ√≥mico
        estado_economico = self._evaluar_estado_economico()
        
        # Calcular nueva tasa usando modelos integrados o Taylor Rule
        if self.usar_modelos_avanzados:
            nueva_tasa = self._calcular_tasa_con_modelos_avanzados(estado_economico)
        else:
            nueva_tasa = self._calcular_regla_taylor()
        
        # Aplicar suavizamiento
        nueva_tasa = self._aplicar_suavizamiento(nueva_tasa)
        
        # Aplicar l√≠mites realistas
        nueva_tasa = max(0.0, min(0.15, nueva_tasa))  # Entre 0% y 15%
        
        # Crear decisi√≥n
        decision = self._crear_decision_monetaria(ciclo, nueva_tasa, estado_economico)
        
        # Implementar decisi√≥n
        self._implementar_decision(decision)
        
        # Log de la decisi√≥n con modelos
        if self.usar_modelos_avanzados:
            puntos_base = int((nueva_tasa - self.tasa_actual) * 10000)
            self.logger.info(f"üí∞ DECISI√ìN MONETARIA (Modelos): {puntos_base:+d} pb ‚Üí {nueva_tasa:.3f}% | {estado_economico.value}")
        
        return decision
    
    def _calcular_regla_taylor(self) -> float:
        """
        Implementa la regla de Taylor:
        i = r* + œÄ + Œ±(œÄ - œÄ*) + Œ≤(y - y*)
        
        Donde:
        i = tasa de inter√©s nominal
        r* = tasa de inter√©s real neutral
        œÄ = inflaci√≥n actual
        œÄ* = meta de inflaci√≥n
        y - y* = brecha del producto
        Œ±, Œ≤ = pesos de reacci√≥n
        """
        try:
            # Obtener inflaci√≥n actual
            inflacion_actual = self._obtener_inflacion_actual()
            
            # Calcular brecha del producto
            brecha_producto = self._calcular_brecha_producto()
            
            # Calcular tasa seg√∫n Taylor Rule
            tasa_taylor = (
                self.tasa_neutral +                                    # r*
                inflacion_actual +                                     # œÄ
                self.peso_inflacion * (inflacion_actual - self.inflacion_objetivo) +  # Œ±(œÄ - œÄ*)
                self.peso_producto * brecha_producto                   # Œ≤(y - y*)
            )
            
            return tasa_taylor
            
        except Exception as e:
            self.logger.warning(f"Error en c√°lculo de regla de Taylor: {e}")
            return self.tasa_actual
        
        return decision
    
    def _calcular_tasa_con_modelos_avanzados(self, estado_economico: EstadoEconomico) -> float:
        """Calcula tasa √≥ptima usando modelos econ√≥micos avanzados"""
        try:
            # Preparar estado econ√≥mico para los modelos
            estado_actual = self._preparar_estado_para_modelos()
            
            # Ejecutar an√°lisis completo
            analisis = self.integrador_modelos.analisis_completo(estado_actual)
            
            # Extraer recomendaciones de tasas
            if 'sintesis' in analisis and 'tasa_consenso' in analisis['sintesis']:
                tasa_consenso = analisis['sintesis']['tasa_consenso']
                
                # Ajustar seg√∫n estado econ√≥mico detectado por calibrador
                if self.calibrador:
                    regimen = self.calibrador.detectar_regimen_economico(estado_actual)
                    politicas = self.calibrador.sugerir_politicas_por_regimen(regimen)
                    
                    if 'tasas_sugeridas' in politicas:
                        rango_min, rango_max = politicas['tasas_sugeridas']
                        tasa_consenso = max(rango_min, min(rango_max, tasa_consenso))
                
                self.logger.info(f"üßÆ Tasa consenso de modelos: {tasa_consenso:.3f}%")
                return tasa_consenso
            
            # Fallback a Taylor Rule si modelos fallan
            return self._calcular_regla_taylor()
            
        except Exception as e:
            self.logger.warning(f"Error en modelos avanzados, usando Taylor Rule: {e}")
            return self._calcular_regla_taylor()
    
    def _preparar_estado_para_modelos(self) -> Dict:
        """Prepara el estado econ√≥mico para an√°lisis de modelos"""
        
        estado = {
            'inflacion': self._obtener_inflacion_actual(),
            'desempleo': getattr(self.mercado, 'tasa_desempleo', 0.05),
            'crecimiento_pib': self._calcular_crecimiento_pib(),
            'productividad': getattr(self.mercado, 'productividad_promedio', 1.0),
            'oferta_monetaria': getattr(self.mercado, 'masa_monetaria', 1000000),
            'nivel_precios': getattr(self.mercado, 'nivel_precios_promedio', 100),
            'gasto_gobierno': getattr(self.mercado, 'gasto_publico', 0.2),
            'capital': self._estimar_stock_capital(),
            'trabajo': self._estimar_empleo_total(),
            'pib': self._obtener_pib_actual(),
            'tasa_interes': self.tasa_actual
        }
        
        return estado
    
    def _calcular_crecimiento_pib(self) -> float:
        """Calcula tasa de crecimiento del PIB"""
        if hasattr(self.mercado, 'pib_historico') and len(self.mercado.pib_historico) >= 2:
            pib_actual = self.mercado.pib_historico[-1]
            pib_anterior = self.mercado.pib_historico[-2]
            if pib_anterior > 0:
                return (pib_actual - pib_anterior) / pib_anterior
        return 0.02  # 2% default
    
    def _estimar_stock_capital(self) -> float:
        """Estima el stock de capital total de la econom√≠a"""
        if hasattr(self.mercado, 'empresas'):
            capital_total = sum(getattr(emp, 'capital', 0) for emp in self.mercado.empresas)
            return max(capital_total, 1.0)
        return 1000000  # Default
    
    def _estimar_empleo_total(self) -> float:
        """Estima el empleo total de la econom√≠a"""
        if hasattr(self.mercado, 'consumidores'):
            empleados = sum(1 for cons in self.mercado.getConsumidores() 
                          if getattr(cons, 'empleado', False))
            return max(empleados / len(self.mercado.getConsumidores()), 0.01)
        return 0.95  # 95% empleo default
    
    def _obtener_pib_actual(self) -> float:
        """Obtiene PIB actual"""
        if hasattr(self.mercado, 'pib_historico') and self.mercado.pib_historico:
            return self.mercado.pib_historico[-1]
        return 1000000  # Default
        
    def _calcular_regla_taylor(self) -> float:
        """
        Calcula la tasa de inter√©s usando la Regla de Taylor:
        i = r* + œÄ + Œ±(œÄ - œÄ*) + Œ≤(y - y*)
        """
        try:
            inflacion_actual = self._obtener_inflacion_actual()
            
            # Calcular brecha del producto
            brecha_producto = self._calcular_brecha_producto()
            
            # Calcular tasa seg√∫n Taylor Rule
            tasa_taylor = (
                self.tasa_neutral +                                    # r*
                inflacion_actual +                                     # œÄ
                self.peso_inflacion * (inflacion_actual - self.inflacion_objetivo) +  # Œ±(œÄ - œÄ*)
                self.peso_producto * brecha_producto                   # Œ≤(y - y*)
            )
            
            return tasa_taylor
            
        except Exception as e:
            self.logger.warning(f"Error en c√°lculo de regla de Taylor: {e}")
            return self.tasa_actual
    
    def _obtener_inflacion_actual(self) -> float:
        """Obtiene la inflaci√≥n actual o estimada"""
        if hasattr(self.mercado, 'inflacion_historica') and self.mercado.inflacion_historica:
            # Usar promedio de √∫ltimos 3 per√≠odos para suavizar
            inflacion_reciente = self.mercado.inflacion_historica[-3:]
            return sum(inflacion_reciente) / len(inflacion_reciente)
        else:
            return self.inflacion_objetivo  # Asumir meta si no hay datos
    
    def _calcular_brecha_producto(self) -> float:
        """
        Calcula la brecha del producto (output gap):
        (PIB actual - PIB potencial) / PIB potencial
        """
        try:
            if not self.mercado.pib_historico:
                return 0.0
                
            pib_actual = self.mercado.pib_historico[-1]
            
            # Estimar PIB potencial usando tendencia
            if self.pib_potencial_estimado is None:
                self._estimar_pib_potencial()
            
            if self.pib_potencial_estimado is None:
                return 0.0
                
            brecha = (pib_actual - self.pib_potencial_estimado) / self.pib_potencial_estimado
            
            # Limitar la brecha a rangos realistas (-20% a +20%)
            return max(-0.20, min(0.20, brecha))
            
        except Exception as e:
            self.logger.warning(f"Error calculando brecha del producto: {e}")
            return 0.0
    
    def _estimar_pib_potencial(self):
        """Estima el PIB potencial usando tendencia de crecimiento"""
        try:
            if len(self.mercado.pib_historico) < 5:
                # Si hay pocos datos, usar el PIB inicial como potencial
                self.pib_potencial_estimado = self.mercado.pib_historico[0] if self.mercado.pib_historico else 100000
                return
            
            # Usar regresi√≥n simple para estimar tendencia
            n = len(self.mercado.pib_historico)
            x_sum = sum(range(n))
            y_sum = sum(self.mercado.pib_historico)
            xy_sum = sum(i * pib for i, pib in enumerate(self.mercado.pib_historico))
            x2_sum = sum(i**2 for i in range(n))
            
            # Calcular pendiente de la tendencia
            pendiente = (n * xy_sum - x_sum * y_sum) / (n * x2_sum - x_sum**2)
            intercepto = (y_sum - pendiente * x_sum) / n
            
            # PIB potencial = tendencia en el per√≠odo actual
            self.pib_potencial_estimado = intercepto + pendiente * (n - 1)
            
        except Exception as e:
            self.logger.warning(f"Error estimando PIB potencial: {e}")
            self.pib_potencial_estimado = self.mercado.pib_historico[-1] if self.mercado.pib_historico else 100000
    
    def _aplicar_suavizamiento(self, nueva_tasa: float) -> float:
        """Aplica suavizamiento para evitar cambios bruscos de tasas"""
        return self.suavizamiento * self.tasa_actual + (1 - self.suavizamiento) * nueva_tasa
    
    def _evaluar_estado_economico(self) -> EstadoEconomico:
        """Eval√∫a el estado actual de la econom√≠a"""
        try:
            inflacion = self._obtener_inflacion_actual()
            brecha_producto = self._calcular_brecha_producto()
            
            # L√≥gica de clasificaci√≥n del estado econ√≥mico
            if inflacion > self.inflacion_objetivo + 0.02 and brecha_producto < -0.02:
                return EstadoEconomico.ESTANFLACION
            elif brecha_producto < -0.03:
                return EstadoEconomico.RECESION
            elif brecha_producto > 0.03:
                return EstadoEconomico.EXPANSION
            else:
                return EstadoEconomico.RECUPERACION
                
        except Exception:
            return EstadoEconomico.RECUPERACION
    
    def _crear_decision_monetaria(self, ciclo: int, nueva_tasa: float, estado: EstadoEconomico) -> DecisionMonetaria:
        """Crea el registro de la decisi√≥n monetaria"""
        inflacion_actual = self._obtener_inflacion_actual()
        brecha_producto = self._calcular_brecha_producto()
        
        # Generar justificaci√≥n
        cambio_tasa = nueva_tasa - self.tasa_actual
        
        if abs(cambio_tasa) < 0.001:
            justificacion = f"Mantener tasa en {self.tasa_actual:.3f}% - Condiciones estables"
        elif cambio_tasa > 0:
            if inflacion_actual > self.inflacion_objetivo:
                justificacion = f"Subir tasa +{cambio_tasa:.3f}% - Controlar inflaci√≥n ({inflacion_actual:.3f}%)"
            else:
                justificacion = f"Subir tasa +{cambio_tasa:.3f}% - Enfriar econom√≠a sobrecalentada"
        else:
            if brecha_producto < 0:
                justificacion = f"Bajar tasa {cambio_tasa:.3f}% - Estimular crecimiento (brecha: {brecha_producto:.3f})"
            else:
                justificacion = f"Bajar tasa {cambio_tasa:.3f}% - Apoyar inflaci√≥n baja"
        
        return DecisionMonetaria(
            ciclo=ciclo,
            tasa_anterior=self.tasa_actual,
            tasa_nueva=nueva_tasa,
            inflacion_objetivo=self.inflacion_objetivo,
            inflacion_actual=inflacion_actual,
            brecha_producto=brecha_producto,
            justificacion=justificacion
        )
    
    def _implementar_decision(self, decision: DecisionMonetaria):
        """Implementa la decisi√≥n monetaria en el sistema"""
        # Actualizar tasa del banco central
        self.tasa_actual = decision.tasa_nueva
        
        # Propagar a sistema bancario
        if hasattr(self.mercado, 'sistema_bancario'):
            self._actualizar_tasas_sistema_bancario()
        
        # Guardar en historial
        self.decisiones_historicas.append(decision)
        
        # Log de la decisi√≥n
        self.logger.info(f"DECISI√ìN MONETARIA - Ciclo {decision.ciclo}: {decision.justificacion}")
    
    def _actualizar_tasas_sistema_bancario(self):
        """Actualiza las tasas del sistema bancario"""
        try:
            for banco in self.mercado.sistema_bancario.bancos:
                # Las tasas de los bancos siguen la tasa del banco central con spread
                spread_depositos = 0.01  # 1% menos para dep√≥sitos
                spread_prestamos = 0.03  # 3% m√°s para pr√©stamos
                
                banco.tasa_depositos = max(0.001, self.tasa_actual - spread_depositos)
                banco.tasa_base_prestamos = self.tasa_actual + spread_prestamos
                
        except Exception as e:
            self.logger.warning(f"Error actualizando tasas bancarias: {e}")
    
    def _actualizar_estimaciones(self):
        """Actualiza las estimaciones econ√≥micas del banco central"""
        # Reestimar PIB potencial cada cierto n√∫mero de ciclos
        if len(self.mercado.pib_historico) % 10 == 0:
            self._estimar_pib_potencial()
        
        # Actualizar tendencia de inflaci√≥n
        if hasattr(self.mercado, 'inflacion_historica') and self.mercado.inflacion_historica:
            self.tendencia_inflacion = self.mercado.inflacion_historica[-12:]  # √öltimos 12 ciclos
    
    def generar_comunicado_monetario(self, decision: DecisionMonetaria) -> str:
        """Genera un comunicado oficial de pol√≠tica monetaria"""
        comunicado = []
        comunicado.append("="*50)
        comunicado.append("üìà COMUNICADO DE POL√çTICA MONETARIA")
        comunicado.append("="*50)
        comunicado.append(f"Ciclo: {decision.ciclo}")
        comunicado.append(f"Decisi√≥n: Tasa de inter√©s {decision.tasa_anterior:.3f}% ‚Üí {decision.tasa_nueva:.3f}%")
        comunicado.append("")
        comunicado.append("AN√ÅLISIS ECON√ìMICO:")
        comunicado.append(f"‚Ä¢ Inflaci√≥n actual: {decision.inflacion_actual:.3f}% (objetivo: {decision.inflacion_objetivo:.3f}%)")
        comunicado.append(f"‚Ä¢ Brecha del producto: {decision.brecha_producto:.3f}%")
        comunicado.append("")
        comunicado.append("JUSTIFICACI√ìN:")
        comunicado.append(f"‚Ä¢ {decision.justificacion}")
        comunicado.append("")
        
        if hasattr(self, 'forward_guidance') and self.forward_guidance:
            comunicado.append("ORIENTACI√ìN FUTURA:")
            comunicado.append(f"‚Ä¢ {self.forward_guidance}")
        
        comunicado.append("="*50)
        
        return "\n".join(comunicado)
    
    def obtener_efectividad_politica(self) -> Dict[str, float]:
        """Calcula m√©tricas de efectividad de la pol√≠tica monetaria"""
        try:
            if len(self.decisiones_historicas) < 3:
                return {"efectividad_inflacion": 0.5, "efectividad_producto": 0.5}
            
            # Calcular qu√© tan cerca se ha mantenido la inflaci√≥n del objetivo
            inflaciones_post_decision = []
            for i, decision in enumerate(self.decisiones_historicas[-5:]):  # √öltimas 5 decisiones
                ciclo_decision = decision.ciclo
                # Buscar inflaci√≥n 3 ciclos despu√©s de la decisi√≥n
                idx_futuro = None
                for j, inf in enumerate(self.mercado.inflacion_historica):
                    if j >= ciclo_decision + 3:
                        idx_futuro = j
                        break
                
                if idx_futuro and idx_futuro < len(self.mercado.inflacion_historica):
                    inflaciones_post_decision.append(self.mercado.inflacion_historica[idx_futuro])
            
            # Efectividad inflaci√≥n: qu√© tan cerca del objetivo
            if inflaciones_post_decision:
                desviaciones_inflacion = [abs(inf - self.inflacion_objetivo) for inf in inflaciones_post_decision]
                # Menos punitivo: factor 8 en lugar de 10 para mapear a [0,1]
                efectividad_inflacion = max(0, 1 - (sum(desviaciones_inflacion) / len(desviaciones_inflacion)) * 8)
            else:
                efectividad_inflacion = 0.5
            
            # Efectividad producto: reducci√≥n de volatilidad
            if len(self.mercado.pib_historico) >= 10:
                volatilidad_pib = self._calcular_volatilidad_pib()
                efectividad_producto = max(0, 1 - volatilidad_pib * 5)
            else:
                efectividad_producto = 0.5
            
            return {
                "efectividad_inflacion": efectividad_inflacion,
                "efectividad_producto": efectividad_producto
            }
            
        except Exception as e:
            self.logger.warning(f"Error calculando efectividad: {e}")
            return {"efectividad_inflacion": 0.5, "efectividad_producto": 0.5}
    
    def _calcular_volatilidad_pib(self) -> float:
        """Calcula la volatilidad del crecimiento del PIB"""
        if len(self.mercado.pib_historico) < 5:
            return 0.1
            
        crecimientos = []
        for i in range(1, len(self.mercado.pib_historico)):
            crecimiento = (self.mercado.pib_historico[i] - self.mercado.pib_historico[i-1]) / self.mercado.pib_historico[i-1]
            crecimientos.append(crecimiento)
        
        if len(crecimientos) < 2:
            return 0.1
            
        media = sum(crecimientos) / len(crecimientos)
        varianza = sum((x - media)**2 for x in crecimientos) / len(crecimientos)
        return math.sqrt(varianza)
    
    def _calcular_tasa_con_modelos_avanzados(self, estado_economico: EstadoEconomico) -> float:
        """Calcula tasa √≥ptima usando modelos econ√≥micos avanzados"""
        try:
            # Preparar estado econ√≥mico para los modelos
            estado_actual = self._preparar_estado_para_modelos()
            
            # Ejecutar an√°lisis completo
            analisis = self.integrador_modelos.analisis_completo(estado_actual)
            
            # Extraer recomendaciones de tasas
            if 'sintesis' in analisis and 'tasa_consenso' in analisis['sintesis']:
                tasa_consenso = analisis['sintesis']['tasa_consenso']
                
                # Ajustar seg√∫n estado econ√≥mico detectado por calibrador
                if self.calibrador:
                    regimen = self.calibrador.detectar_regimen_economico(estado_actual)
                    politicas = self.calibrador.sugerir_politicas_por_regimen(regimen)
                    
                    if 'tasas_sugeridas' in politicas:
                        rango_min, rango_max = politicas['tasas_sugeridas']
                        tasa_consenso = max(rango_min, min(rango_max, tasa_consenso))
                
                self.logger.info(f"üßÆ Tasa consenso de modelos: {tasa_consenso:.3f}%")
                return tasa_consenso
            
            # Fallback a Taylor Rule si modelos fallan
            return self._calcular_regla_taylor()
            
        except Exception as e:
            self.logger.warning(f"Error en modelos avanzados, usando Taylor Rule: {e}")
            return self._calcular_regla_taylor()
    
    def _preparar_estado_para_modelos(self) -> Dict:
        """Prepara el estado econ√≥mico para an√°lisis de modelos"""
        
        estado = {
            'inflacion': self._obtener_inflacion_actual(),
            'desempleo': getattr(self.mercado, 'tasa_desempleo', 0.05),
            'crecimiento_pib': self._calcular_crecimiento_pib(),
            'productividad': getattr(self.mercado, 'productividad_promedio', 1.0),
            'oferta_monetaria': getattr(self.mercado, 'masa_monetaria', 1000000),
            'nivel_precios': getattr(self.mercado, 'nivel_precios_promedio', 100),
            'gasto_gobierno': getattr(self.mercado, 'gasto_publico', 0.2),
            'capital': self._estimar_stock_capital(),
            'trabajo': self._estimar_empleo_total(),
            'pib': self._obtener_pib_actual(),
            'tasa_interes': self.tasa_actual
        }
        
        return estado
    
    def _calcular_crecimiento_pib(self) -> float:
        """Calcula tasa de crecimiento del PIB"""
        if hasattr(self.mercado, 'pib_historico') and len(self.mercado.pib_historico) >= 2:
            pib_actual = self.mercado.pib_historico[-1]
            pib_anterior = self.mercado.pib_historico[-2]
            if pib_anterior > 0:
                return (pib_actual - pib_anterior) / pib_anterior
        return 0.02  # 2% default
    
    def _estimar_stock_capital(self) -> float:
        """Estima el stock de capital total de la econom√≠a"""
        if hasattr(self.mercado, 'empresas'):
            capital_total = sum(getattr(emp, 'capital', 0) for emp in self.mercado.empresas)
            return max(capital_total, 1.0)
        return 1000000  # Default
    
    def _estimar_empleo_total(self) -> float:
        """Estima el empleo total de la econom√≠a"""
        if hasattr(self.mercado, 'consumidores'):
            empleados = sum(1 for cons in self.mercado.getConsumidores() 
                          if getattr(cons, 'empleado', False))
            total_consumidores = len(self.mercado.getConsumidores())
            if total_consumidores > 0:
                return max(empleados / total_consumidores, 0.01)
        return 0.95  # 95% empleo default
    
    def _obtener_pib_actual(self) -> float:
        """Obtiene PIB actual"""
        if hasattr(self.mercado, 'pib_historico') and self.mercado.pib_historico:
            return self.mercado.pib_historico[-1]
        return 1000000  # Default
    
    def generar_reporte_avanzado(self) -> str:
        """Genera reporte avanzado de pol√≠tica monetaria con modelos econ√≥micos"""
        reporte = []
        reporte.append("="*60)
        reporte.append("üè¶ REPORTE AVANZADO BANCO CENTRAL")
        reporte.append("="*60)
        
        # Estado actual
        reporte.append(f"Tasa de Inter√©s Actual: {self.tasa_actual:.3f}%")
        reporte.append(f"Inflaci√≥n Objetivo: {self.inflacion_objetivo:.1%}")
        reporte.append(f"Tasa Neutral Estimada: {self.tasa_neutral:.3f}%")
        
        # Integraci√≥n de modelos avanzados
        if self.usar_modelos_avanzados:
            reporte.append("\nüßÆ AN√ÅLISIS CON MODELOS AVANZADOS:")
            try:
                estado_actual = self._preparar_estado_para_modelos()
                analisis = self.integrador_modelos.analisis_completo(estado_actual)
                
                if 'sintesis' in analisis:
                    sintesis = analisis['sintesis']
                    reporte.append(f"  ‚Ä¢ PIB Consenso: {sintesis.get('pib_consenso', 'N/A')}")
                    reporte.append(f"  ‚Ä¢ Tasa Consenso: {sintesis.get('tasa_consenso', 'N/A'):.3f}%")
                    reporte.append(f"  ‚Ä¢ Consistencia Modelos: {sintesis.get('consistencia_modelos', 'N/A'):.1%}")
                
                # R√©gimen econ√≥mico
                if self.calibrador:
                    regimen = self.calibrador.detectar_regimen_economico(estado_actual)
                    reporte.append(f"  ‚Ä¢ R√©gimen Detectado: {regimen}")
                    
            except Exception as e:
                reporte.append(f"  ‚Ä¢ Error en an√°lisis: {e}")
        else:
            reporte.append("\n‚ö†Ô∏è  Modelos avanzados NO DISPONIBLES")
        
        # Efectividad de pol√≠ticas
        efectividad = self.evaluar_efectividad_politica()
        reporte.append(f"\nüìä EFECTIVIDAD DE POL√çTICA:")
        reporte.append(f"  ‚Ä¢ Control Inflaci√≥n: {efectividad['efectividad_inflacion']:.1%}")
        reporte.append(f"  ‚Ä¢ Estabilidad Producto: {efectividad['efectividad_producto']:.1%}")
        
        # Decisiones recientes
        if self.decisiones_historicas:
            reporte.append(f"\nüìà √öLTIMAS DECISIONES:")
            for decision in self.decisiones_historicas[-3:]:
                cambio_pb = int((decision.tasa_nueva - decision.tasa_anterior) * 10000)
                reporte.append(f"  ‚Ä¢ Ciclo {decision.ciclo}: {cambio_pb:+d} pb")
        
        reporte.append("="*60)
        return "\n".join(reporte)
